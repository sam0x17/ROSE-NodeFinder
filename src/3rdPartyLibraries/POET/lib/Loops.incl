include utils.incl
include ExpStmt.incl

<*
   POET : Parameterized Optimizations for Empirical Tuning
   Copyright (c)  2008,  Qing Yi.  All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 3. Neither the name of UTSA nor the names of its contributors may be used to
    endorse or promote products derived from this software without specific
    prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISEDOF THE POSSIBILITY OF SUCH DAMAGE.
*>

<*******************************************************************
  code templates and parsing/rebuild functions for loops and nests
********************************************************************>

<define ARRAY_ELEM_TYPE ""/>

<code Nest pars=(ctrl, body) annot="" />
<code StmtBlock pars=(stmts) annot="" />
<code Loop pars=(i,start,stop,step)  maxiternum="" />
<code Assign/>
<code ExpStmt/>
<code If pars=(condition) />

<code LoopBound pars=(ivar,start,stop)  
        rebuild=((start=="" && stop=="")?"":LoopBound#(ivar,start,stop)) >
@cond=(start=="")? "" : (Bop#(">=",ivar,start));
 if (stop != "") { 
    if (cond=="") cond=Bop#("<",ivar,stop);
    else cond=Bop#("&&",cond,Bop#("<",ivar,stop));
  }
@/*Loop Bound*/@If#cond@
</code>

<************* Markers of AST ******************************>
<*** AST Markers in general should not appear in a regular code 
     as they should have been processed by various cleanup opt. ***>
<*marker for unrolling a loop nest *>
<code UnrolledLoop pars = (ivar, start, plus, step, ur)/>

<* Marker for the stopping end of inner loop unrolling *> 
<code UnrolledLoopTileEnd pars=(bloop, ur : INT)/>

<code NestApp pars=(loop, append) />

<*************** 
Find atomic statements that are outside nest and inside input
*************>
<xform FindStmtsOutsideNest pars=(nest, input)>
res = "";
foreach (input : (cur = (nest|ExpStmt)) : TRUE)
{
  if (cur != nest)  
       res = BuildList(cur,res);
}
ReverseList(res)
</xform>

<*************** 
Find loops that are inperfectly nested outside inner and inside input 
*************>
<xform FindNonPerfect pars=(inner, input)>
 if (input : inner) {""}
 else if (input : Nest#(_,body)) { FindNonPerfect(inner, body) } 
 else { 
    foreach (input : (cur=Nest) : TRUE) 
      { RETURN (BuildList(cur,FindNonPerfect(inner,cur))); }
    ERROR("Cannot find inner body: " inner " from " input);
 }
</xform>

<*************** 
Find loop controls that are outside inner and inside input 
*************>
<xform FindLoopsInNest pars=(inner, input)>
 switch (input)
 {
 case inner: ("","")
 case (first rest): ((Lookup(inner,first))? FindLoopsInNest(inner,first) : FindLoopsInNest(inner,rest))
 case Nest#(loop,body):   (
     (innerloops,innernests) = FindLoopsInNest(inner, body);
     (innerloops == "")? (loop,input) : (loop::innerloops,input::innernests);
  )
 case StmtBlock#body : FindLoopsInNest(inner,body)
 default: (ERROR("Cannot find inner body: " inner))
}
</xform>

<************
Find the first loop nest in input
************>
<xform FindNest pars=(input)>
    foreach (input : (cur = CODE.Nest) : TRUE)  RETURN  cur; 
    RETURN ""
</xform>

<************
Map tracing handles in tnest to corresponding loop nests in input;
************>
<xform TraceListOfLoops  pars=(tnest, input) trace=GLOBAL.TRACE_TARGET >
   switch (tnest) 
   {
   case VAR: 
       cur = FindNest(input);
       if (!(cur : Nest)) ERROR("Cannot find nest: " tnest);
       MoveTraceHandle[trace=trace](tnest, cur)
   case (first second) :        
       TraceListOfLoops(second, cdr(input));
       TraceListOfLoops(first, car(input))
   default: ""
   }
</xform>

<xform TraceNestedLoops pars=(tnest, input) trace=GLOBAL.TRACE_TARGET >
   cur = FindNest(input);
   if (!(cur : Nest)) ERROR("Cannot find nest: " tnest " in " input);
   if ( !(cur[Nest.ctrl] : CODE.Loop)) 
         RETURN (TraceNestedLoops(tnest,cur[Nest.body]));
   switch (tnest) 
   {
   case VAR: MoveTraceHandle[trace=trace](tnest, cur)
   case (first second):  
          cur = MoveTraceHandle[trace=trace](first, cur);
          orig_body=cur[Nest.body];
          TraceNestedLoops(second, orig_body);
          first
   default: ""
   }
</xform>

<******* 
Map each loop control in input to the whole loop 
*******>
<xform MapLoopsInNest pars=(input, map)>
 foreach (input : (cur=Nest#((CLEAR loop),_)): FALSE) {
   if (map[loop]=="") map[loop] = cur;
   else map[loop]=cur::map[loop];
 }
</xform>

<xform ExpandLoop pars=(outer, loop)>
Loop#(i,lb,ub,step) = loop;
switch (outer)
{
  case Loop#(i1,lb1,ub1,_): Loop#(i, REPLACE(i1,lb1,lb),REPLACE(i1,ub1,ub),step)
  case LoopBound#(i1,lb1,ub1):
       if (lb1 != "") lb=REPLACE(i1,lb1,lb); 
       if (ub1 != "") ub=REPLACE(i1,ub1,ub); 
       Loop#(i,lb,ub,step)
  case (first second) : ExpandLoop(first, ExpandLoop(second,loop))
  default: loop
}
</xform>

<***********
 union loop controls of different nests (possibly aligned) into a single loop 
   which enumerates all involved iterations
************> 
<xform UnionLoops pars=(nests) level="">
res="";
for (p = nests; (cur=car(p)) != ""; p = cdr(p)) {
  if (!(cur : (CLEAR nest,CLEAR align)))
      {  nest=cur;  align = 0; }
   if (nest : Nest#(CLEAR curloop,_)) {
     if (level != "") {
       (outer,_) = FindLoopsInNest(nest,level);
       curloop = ExpandLoop(outer, curloop);
     }
   }
   else curloop = nest;
   if (align != 0) 
     { Loop#(i,lb,ub,step)=curloop; 
       curloop=Loop#(i,lb+align, ub+align, step); }
  if (res=="") res = curloop;
  else if (res != curloop) {
     if (res : Loop#(i,lb,ub,step)) loop=CODE.Loop;
     else if (res : LoopBound#(i,lb,ub)) loop=CODE.LoopBound;
     if (! ((curloop : Loop#(CLEAR i1,CLEAR lb1,CLEAR ub1,CLEAR step1)) || (curloop : LoopBound#(CLEAR i1,CLEAR lb1,CLEAR ub1))))  ERROR("unknown loop: " curloop);
     if (i == "") i = i1;
     if (step == "") step=step1;
     if (step != step1 && step1!="") ERROR("Cannot union loops with different steps");
     if (step < 0) { min=CODE.MAX; max = CODE.MIN; }
     else {min=CODE.MIN; max=CODE.MAX; }
     res = REBUILD(loop#(i,RebuildBop(min,lb,lb1),RebuildBop(max,ub,ub1),step));
  }
}
res
</xform>


<***********************************************>
<xform TraceNonPerfectSplit pars=(nest, nonPerfect, traceSplits) >
 if (nonPerfect=="") RETURN "";
 switch (nest) {
 case Nest#(_, body) :  TraceNonPerfectSplit(body, nonPerfect, traceSplits)
 case (first rest) :
      curTrace = car traceSplits; 
      if (curTrace == "") ERROR("No trace handle for :" first);
      result = first; target=car(nonPerfect); 
      for (p_rest = rest; p_rest != ""; p_rest=cdr p_rest)  {
        if (car(p_rest) == target) BREAK;
        result = (car p_rest) :: result;   
      }
      if (p_rest == "") ERROR("Did not find the non-perfect nest: " nest);
      result = ReverseList(result);
      REPLACE( ERASE(curTrace), result, curTrace); 
      TraceNonPerfectSplit(target, cdr(nonPerfect), cdr traceSplits)
 }
</xform>

<***********
Rebuild a loop/if-then/Unroll nest; skip empty controls;
     the entire nest becomes empty string if body is empty setring
    convert a list of loop/if-then/Unroll controls to a nest
*********************>
<xform BuildNest pars=(loops,body) trace=""  annot="" >
  if (body == "")  RETURN "";
switch (loops) {
case "":   REPLACE(ERASE(trace),body,trace) 
case If#TRUE: REPLACE(ERASE(trace),body,trace)
case If#FALSE: ""
case (first rest):  
   BuildNest(first, BuildNest[annot="";trace=((trace:Nest#(_,t1))?t1:"")](rest, body))
case UnrolledLoop#(i, start, plus, step, ur) : 
       if (ur : UnrolledLoopTileEnd#(bloop,new_ur)) ur = new_ur;
       else {
           bloop="";
           if (! (ur : INT)) ERROR("Expecting an integer but get: " ur);
       }
       for ( (repl = ""; j = ur-1 ); j >= 0; j = j - 1 ) { 
           repl = BuildList(BuildBop(plus,start,j*step),repl); 
        }
       stmt = DUPLICATE(i, repl,   body);
       if (bloop != "" && ur > 1)  {
          tag=bloop[Loop.tag];
          p_stmt = cdr stmt; stmt = (car stmt) :: "";
          for ( p_i=1 ; p_i < ur; (p_i+=1; p_stmt=cdr p_stmt)) 
          {
             cur = (p_i == ur-1)? p_stmt : (car p_stmt); 
             stmt = BuildList(Nest[annot=annot]#(CODE.UnrolledLoopCheck#(tag,i+p_i*step,bloop[Loop.stop]),cur),stmt); 
          }
          REBUILD(ReverseList(stmt))
       }
       else if (ur == 1 || !(i : CODE.UnrollIvarName#(i_var))) { REBUILD(stmt) }
       else {CODE.UnrolledFromIvar#(i_var,ur,REBUILD(stmt))}
case NestApp#(curloop,app):  Nest[annot=annot]#(curloop, body)::app 
default:  Nest[annot=annot]#(loops,body)
}
</xform>

<***********************************************>
<* break the fragment "input" immediately before split*>
<***********************************************>
<xform FissionHelp pars=(split,input) output=(before,in,after)>
 switch (input) {
 case split: res = ("", input, ""); 
 case (s1 s2):
       r1 = FissionHelp(split,s1); 
       if (r1[in] == "")  {
           r2 = FissionHelp(split,s2);
           if (r2[in] == "") res = (input, "", "");
           else res = (BuildList(s1,r2[before]),r2[in],r2[after]);
       }
       else if (r1[after] == "") { res = (r1[before],r1[in],s2); }
       else { res = (r1[before], r1[in], (r1[after] s2)); }
 case Nest#(loop,body):
       r1 = FissionHelp(split,body); 
       if (r1[in] == "")  res = (input,"",""); 
       else {
            loopCopy = COPY loop;
            res = (BuildNest(loopCopy,r1[before]), BuildNest(loop, r1[in]), 
                  BuildNest(loopCopy,r1[after]));
       }
 default: if (Lookup(split,input)) ERROR("Unable to split: " input);
          res = (input,"","");
 }
 res
</xform>

