
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R6xx Use of Data Objects
%%%%%%%%%%

%%module languages/fortran/syntax/R600UseDataObjects
module R600UseDataObjects

imports
  %%  languages/fortran/syntax/FortranLex
  %%  languages/fortran/syntax/R700Expressions
  FortranLex
  R700Expressions

exports

sorts

%% 6.1 Designator

  Designator                          %% R601

%% 6.2 Variable

  Variable                            %% R602
                                      %% R603  VariableName - lex
  LogicalVariable                     %% R604
  CharVariable                        %% R605
  DefaultCharVariable                 %% R606
  IntVariable                         %% R607
  
%% 6.4 Scalars

  Substring                           %% R608
  ParentString                        %% R609
  SubstringRange                      %% R610

  DataRef                             %% R611
  PartRef                             %% R612
  StructureComponent                  %% R613
  CoindexedNamedObject                %% R614
  ComplexPartDesignator               %% R615
  TypeParamInquiry                    %% R616

%% 6.5 Arrays

  ArrayElement                        %% R617
  ArraySection                        %% R618
  Subscript                           %% R619
  SectionSubscript                    %% R620
  SubscriptTriplet                    %% R621
  Stride                              %% R622
  VectorSubscript                     %% R623

  SectionSubscriptList

%% 6.6 Image selectors

  ImageSelector                       %% R624
  Cosubscript                         %% R625

  CosubscriptList

%% 6.7 Dynamic association

  AllocateStmt                        %% R626
  AllocOpt                            %% R627
  StatVariable                        %% R628
  ErrmsgVariable                      %% R629
                                      %% R630  SourceExpr
  Allocation                          %% R631
  AllocateObject                      %% R632
  AllocateShapeSpec                   %% R633
  LowerBoundExpr                      %% R634
  UpperBoundExpr                      %% R635
  AllocateCoarraySpec                 %% R636
  AllocateCoshapeSpec                 %% R637
  NullifyStmt                         %% R638
  PointerObject                       %% R639
  DeallocateStmt                      %% R640
  DeallocOpt                          %% R641

  AllocateCoshapeSpecList AllocateObjectList AllocateShapeSpecList
  AllocationList AllocOptList DeallocOptList PointerObjectList

context-free syntax


%% 6.1 Designator
%%

%%R601
%%          AMB  ObjectName                    %% R613 part-name -> part-ref -> data-ref
%%          AMB  ArrayElement                  %% R617 is data-ref
%%          AMB  ArraySection                  %% R618 is data-ref [ (substring-range) ] 
%%          AMB  CoindexedNamedObject          %% R614 is data-ref
%%          AMB  ComplexPartDesignator         %% R615 is designator % ('RE' | 'IM') -> data-ref
%%          AMB  StructureComponent            %% R614 is data-ref
%%          AMB  Substring                     %% R609 is data-ref '(' substring-range ')'
%%
%%      the above reduces to
%%

%%  ObjectName
%%  CoindexedNamedObject
  DataRef                              -> Designator   {cons("Designator_AMB")}
  Substring                            -> Designator   {cons("Designator_AMB")}

%%TODO-F08 ambiguous is it needed.  I think '(' SubstringRange ')' is needed at end of 
%%Designator '(' SubstringRange ')'    -> Designator   {cons("designator")}

%%TODO-F08 CharLiteralConstant '(' substring_range ')'  -> Designator  %% from OFP ANTLR grammar


%% 6.2 Variable
%%

%%R602
  Designator                           -> Variable  {cons("Variable")}
%%AMB Expr                             -> Variable  %% expr shall be a func ref with pointer result

%%R602
%%TODO-AMB   VariableName | ArrayElement                                   -> ScalarVariable
%%TODO-AMB   VariableName                                                  -> Variable
%%TODO-AMB   VariableName '(' {Subscript ","}+ ')'                         -> Variable
%%TODO-AMB   VariableName SubstringRange                                   -> Variable
%%TODO-AMB   VariableName '(' {Subscript ","}+ ')' SubstringRange          -> Variable
%%TODO-AMB   Expr                                                          -> Subscript

%%R603
%% VariableName

%%R604
  Variable           -> LogicalVariable

%%605
  Variable           -> CharVariable

%%R606
  Variable           -> DefaultCharVariable

%%607
  Variable           -> IntVariable


%% 6.4 Scalars
%%

%%608
  ParentString '(' SubstringRange ')'  -> Substring        {cons("Substring")}

%%609
%%      constant substituted for scalar-constant
%%      structure-component substituted for scalar-structure-component
%%
  ScalarVariableName                   -> ParentString     {cons("ParentString")}
  ArrayElement                         -> ParentString     {cons("ParentString")}
  CoindexedNamedObject                 -> ParentString     {cons("ParentString")}
  StructureComponent                   -> ParentString     {cons("ParentString")}
  Constant                             -> ParentString     {cons("ParentString")}

%%R610
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr? ':' IntExpr?                -> SubstringRange   {cons("SubstringRange")}

%%R611
%%TODO - is the following still true?
%%AMBibuous with part-ref ambiguous with name
%%{PartRef "%"}+                                                -> DataRef   {cons("DataRef")}
%%Name                                                          -> DataRef   {reject}
%%
%%REMOVE  PartName '%' PartName                                         -> DataRef   {cons("DataRef")}
%%REMOVE  DataRef  '%' PartName                                         -> DataRef   {cons("DataRef")}
%%REMOVE  PartName ArraySelector                                        -> DataRef   {cons("DataRef")}
%%REMOVE  DataRef  ArraySelector                                        -> DataRef   {cons("DataRef")}

%%R611
  PartRef ('%' PartRef)*                                 -> DataRef   {cons("DataRef")}

%%R612 part-ref
%%REMOVE PartName                                  ImageSelector?     -> PartRef   {cons("PartRef")}
%%REMOVE PartName   '(' SectionSubscriptList ')'
%%REMOVE         ( '(' SubstringRange       ')' )? ImageSelector?     -> PartRef   {cons("PartRef")}

%%R612
  PartName ( '(' SectionSubscriptList ')' )?
           (     ImageSelector            )?             -> PartRef   {cons("PartRef")}

%%R613
  DataRef                                                -> StructureComponent  {cons("StructureComponent")}

%%R614
  DataRef                                                -> CoindexedNamedObject {cons("CoindexedNamedObject")}

%%R615
  Designator '%' 'RE'                                    -> ComplexPartDesignator {cons("ComplexPartDesignator_RE")}
  Designator '%' 'IM'                                    -> ComplexPartDesignator {cons("ComplexPartDesignator_IM")}

%%R616
  Designator '%' TypeParamName                           -> TypeParamInquiry     {cons("TypeParamInquiry")}


%% 6.5 Arrays
%%

%%R617
  DataRef                                                -> ArrayElement         {cons("ArrayElement")}

%%R618
  DataRef ('(' SubstringRange ')')?                      -> ArraySection         {cons("ArraySection")}
  ComplexPartDesignator                                  -> ArraySection         {cons("ArraySection")}

%%R619
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Subscript            {cons("Subscript")}

%%R620
  Subscript                                              -> SectionSubscript     {cons("SectionSubscript")}
  SubscriptTriplet                                       -> SectionSubscript     {cons("SectionSubscript")}
%%VectorSubscript     %%AMB with subscript               -> SectionSubscript     {cons("SectionSubscript")}

  {SectionSubscript ','}+                                -> SectionSubscriptList {cons("SectionSubscriptList")}

%%R621
  Subscript? ':' Subscript? (':' Stride)?                -> SubscriptTriplet     {cons("SubscriptTriplet")}

%%R622
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Stride               {cons("Stride")}

%%R623
  IntExpr                                                -> VectorSubscript      {cons("VectorSubscript")}


%% 6.6 Image selectors
%%

%%R624
  '[' CosubscriptList ']'                                -> ImageSelector        {cons("ImageSelector")}

%%625
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Cosubscript          {cons("Cosubscript")}
  {Cosubscript ','}+                                     -> CosubscriptList      {cons("CosubscriptList")}


%% 6.7 Dynamic association
%%

%%R626
  Label? 'ALLOCATE'
           '(' (TypeSpec '::')?
                    AllocationList
               (',' AllocOptList )?
           ')'                                       EOS -> AllocateStmt         {cons("AllocateStmt")}

%%R627
%%      expr substituted for source-expr
%%
  'ERRMSG' '=' ErrmsgVariable                            -> AllocOpt             {cons("AllocOpt_ERR")}
  'MOLD'   '=' Expr                                      -> AllocOpt             {cons("AllocOpt_MOLD")}
  'SOURCE' '=' Expr                                      -> AllocOpt             {cons("AllocOpt_SRC")}
  'STAT'   '=' StatVariable                              -> AllocOpt             {cons("AllocOpt_STAT")}
  {AllocOpt ','}+                                        -> AllocOptList         {cons("AllocOptList")}

%%R628
%%     int-variable substituted for scalar-int-variable
%%
  IntVariable                                            -> StatVariable         {cons("StatVariable")}

%%R629
%%     default-char-variable substituted for scalar-default-char-variable
%%
  DefaultCharVariable                                    -> ErrmsgVariable       {cons("ErrmsgVariable")}

%%R630
%% SourceExpr

%%R631
   AllocateObject
        ( '(' AllocateShapeSpecList ')'    )?
        ( '[' AllocateCoarraySpec      ']' )?            -> Allocation           {cons("Allocation")}
  {Allocation ','}+                                      -> AllocationList       {cons("AllocationList")}

%%R632
%% VariableName         %% AMB with alt2
%% StructureComponent
  StructureComponent                                     -> AllocateObject       {cons("AllocateObject_AMB")}
  {AllocateObject ','}+                                  -> AllocateObjectList   {cons("AllocateObjectList")}

%%R633
  ( LowerBoundExpr ':' )? UpperBoundExpr                 -> AllocateShapeSpec    {cons("AllocateShapeSpec")}
  {AllocateShapeSpec ','}+                               -> AllocateShapeSpecList{cons("AllocateShapeSpecList")}

%%R634
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> LowerBoundExpr       {cons("LowerBoundExpr")}

%%R635
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> UpperBoundExpr       {cons("UpperBoundExpr")}

%%R636
  ( AllocateCoshapeSpecList ','    )?
  ( LowerBoundExpr ':'             )?  '*'               -> AllocateCoarraySpec  {cons("AllocateCoarraySpec")}

%%R637
  ( LowerBoundExpr ':' )? UpperBoundExpr                 -> AllocateCoshapeSpec     {cons("AllocateCoshapeSpec")}
  {AllocateCoshapeSpec ','}+                             -> AllocateCoshapeSpecList {cons("AllocateCoshapeSpecList")}

%%R638
  Label? 'NULLIFY' '(' PointerObjectList ')'         EOS -> NullifyStmt          {cons("NullifyStmt")}

%%R639
  VariableName                                           -> PointerObject        {cons("PointerObject")}
  StructureComponent                                     -> PointerObject        {cons("PointerObject")}
  ProcPointerName                                        -> PointerObject        {cons("PointerObject")}
  {PointerObject ','}+                                   -> PointerObjectList    {cons("PointerObjectList")}

%%R640
  Label? 'DEALLOCATE'
            '('
                       AllocateObjectList
                  (',' DeallocOptList     )?
            ')'                                      EOS -> DeallocateStmt       {cons("DeallocateStmt")}

%%641
  'STAT'   '=' StatVariable                              -> DeallocOpt           {cons("DeallocOpt")}
  'ERRMSG' '=' ErrmsgVariable                            -> DeallocOpt           {cons("DeallocOpt")}
  {DeallocOpt ','}+                                      -> DeallocOptList       {cons("DeallocOptList")}
