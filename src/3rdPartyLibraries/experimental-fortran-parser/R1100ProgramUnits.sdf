
%%%%%%%%%%
%% This Fortran grammar is structured according to document ISO/IEC 1539:1991. 
%% Rulenumbers are named R2xx - R12xx as in Annex D of 1539:1991
%% The grammar is adapted from an ELI project grammer, http://eli-project.cvs.sourceforge.net/eli-project
%%
%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

%%module languages/fortran/syntax/Fortran90
module R1100ProgramUnits

%%imports languages/fortran/syntax/FortranLex
%%imports languages/fortran/syntax/R400DataTypes
%%imports languages/fortran/syntax/R500DataDeclarations
%%imports languages/fortran/syntax/R600UseDataObjects
%%imports languages/fortran/syntax/R700Expressions
%%imports languages/fortran/syntax/R800ExecutionControl
%%imports languages/fortran/syntax/R900IOStatements
%%imports languages/fortran/syntax/R1000_IOEditing
%%imports languages/fortran/syntax/R1100ProgramUnits
%%imports languages/fortran/syntax/R1200Procedures

imports FortranLex
imports R400DataTypes
imports R500DataDeclarations
imports R600UseDataObjects
imports R700Expressions
imports R800ExecutionControl
imports R900IOStatements
imports R1000_IOEditing
imports R1100ProgramUnits
imports R1200Procedures

exports

sorts
  
  Program                             %% R201
  ProgramUnit                         %% R202
  ExternalSubprogram                  %% R203
  SpecificationPart                   %% R204
  ImplicitPart                        %% R205
  ImplicitPartStmt                    %% R206
  DeclarationConstruct                %% R207
  ExecutionPart                       %% R208
  ExecutionPartConstruct              %% R209
  InternalSubprogramPart              %% R210
  InternalSubprogram                  %% R211
  OtherSpecificationStmt              %% R212
  ExecutableConstruct                 %% R213
  ActionStmt                          %% R214
  Keyword                             %% R215

  MainProgram                         %% R1101
  ProgramStmt                         %% R1102
  EndProgramStmt                      %% R1103

  Module                              %% R1104
  ModuleStmt                          %% R1105
  EndModuleStmt                       %% R1106
  ModuleSubprogramPart                %% R1107
  ModuleSubprogram                    %% R1108
  UseStmt                             %% R1109
  ModuleNature                        %% R1110
  Rename                              %% R1111
  Only                                %% R1112
  OnlyUseName                         %% R1113
  LocalDefinedOperator                %% R1114
  UseDefinedOperator                  %% R1115
  Submodule                           %% R1116
  SubmoduleStmt                       %% R1117
  ParentIdentifier                    %% R1118
  EndSubmoduleStmt                    %% R1119
  BlockData                           %% R1120
  BlockDataStmt                       %% R1121
  EndBlockDataStmt                    %% R1122

  OnlyList RenameList

context-free start-symbols 
  Program

context-free syntax

%%R201 JD: the optional startcommentblock is needed to parse comment lines in 1st lines of a file.
%% original: ExecutableProgram ProgramUnit -> ExecutableProgram

%%R201
  StartCommentBlock?  ProgramUnit+       -> Program             {cons("Program")}

%%R202
  MainProgram                            -> ProgramUnit         {cons("ProgramUnit")}
  ExternalSubprogram                     -> ProgramUnit         {cons("ProgramUnit")}
  Module                                 -> ProgramUnit         {cons("ProgramUnit")}
  Submodule                              -> ProgramUnit         {cons("ProgramUnit")}
  BlockData                              -> ProgramUnit         {cons("ProgramUnit")}

%%R203
  FunctionSubprogram                     -> ExternalSubprogram  {cons("ExternalSubprogram")}
  SubroutineSubprogram                   -> ExternalSubprogram  {cons("ExternalSubprogram")}
  
%%R204
  UseStmt*
  ImportStmt*
  ImplicitPart?
  DeclarationConstruct*                  -> SpecificationPart   {cons("SpecificationPart")}

%%R205
  ImplicitPartStmt* ImplicitStmt         -> ImplicitPart        {cons("ImplicitPart")}

%%R206
  ImplicitStmt                           -> ImplicitPartStmt    {cons("ImplicitPartStmt")}
  ParameterStmt                          -> ImplicitPartStmt    {cons("ImplicitPartStmt")}
  FormatStmt                             -> ImplicitPartStmt    {cons("ImplicitPartStmt")}
  EntryStmt                              -> ImplicitPartStmt    {cons("ImplicitPartStmt")}

%%R207
  DerivedTypeDef                         -> DeclarationConstruct    {cons("DeclarationConstruct")}
  EntryStmt                              -> DeclarationConstruct    {cons("DeclarationConstruct")}
  EnumDef                                -> DeclarationConstruct    {cons("DeclarationConstruct")}
  FormatStmt                             -> DeclarationConstruct    {cons("DeclarationConstruct")}
  InterfaceBlock                         -> DeclarationConstruct    {cons("DeclarationConstruct")}
  ParameterStmt                          -> DeclarationConstruct    {cons("DeclarationConstruct")}
  ProcedureDeclarationStmt               -> DeclarationConstruct    {cons("DeclarationConstruct")}
  OtherSpecificationStmt                 -> DeclarationConstruct    {cons("DeclarationConstruct")}
  TypeDeclarationStmt                    -> DeclarationConstruct    {cons("DeclarationConstruct")}
  StmtFunctionStmt                       -> DeclarationConstruct    {cons("DeclarationConstruct")}

%%R208
%%     WARNING-MODIFICATION:
%%       Removed the leading ExecutableConstruct to allow an empty list to
%%       be an ExecutionPart.  Check order of statements in a separate stage.
%%
  ExecutionPartConstruct*                -> ExecutionPart           {cons("ExecutionPart")}

%%R209
  ExecutableConstruct                    -> ExecutionPartConstruct  {cons("ExecutionPartConstruct")}
  FormatStmt                             -> ExecutionPartConstruct  {cons("ExecutionPartConstruct")}
  EntryStmt                              -> ExecutionPartConstruct  {cons("ExecutionPartConstruct")}
  DataStmt                               -> ExecutionPartConstruct  {cons("ExecutionPartConstruct")}

%%R210
  ContainsStmt InternalSubprogram*       -> InternalSubprogramPart  {cons("InternalSubprogramPart")}

%%R211
  FunctionSubprogram                     -> InternalSubprogram      {cons("InternalSubprogram")}
  SubroutineSubprogram                   -> InternalSubprogram      {cons("InternalSubprogram")}

%%R212
  AccessStmt                             -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  AllocatableStmt                        -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  AsynchronousStmt                       -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  BindStmt                               -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  CodimensionStmt                        -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  ContiguousStmt                         -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  CommonStmt                             -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  DataStmt                               -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  DimensionStmt                          -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  EquivalenceStmt                        -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  ExternalStmt                           -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  IntentStmt                             -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  IntrinsicStmt                          -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  NamelistStmt                           -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  OptionalStmt                           -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  PointerStmt                            -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  ProtectedStmt                          -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  SaveStmt                               -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  TargetStmt                             -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  VolatileStmt                           -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}
  ValueStmt                              -> OtherSpecificationStmt  {cons("OtherSpecificationStmt")}

%%R213
%%     WARNING-MODIFICATION:
%%       do-construct is problematic because a labeled statement may terminate it
%%          not necessarily an end-do-stmt.  Replace by do-stmt and end-do-stmt and
%%          resolve the construct end at a latter stage.
%%
  ActionStmt                             -> ExecutableConstruct     {cons("ExecutableConstruct")}
  AssociateConstruct                     -> ExecutableConstruct     {cons("ExecutableConstruct")}
  BlockConstruct                         -> ExecutableConstruct     {cons("ExecutableConstruct")}
  CaseConstruct                          -> ExecutableConstruct     {cons("ExecutableConstruct")}
  CriticalConstruct                      -> ExecutableConstruct     {cons("ExecutableConstruct")}
%%DoConstruct          %% Ambiguous - placed related statements in action-stmt
  ForallConstruct                        -> ExecutableConstruct     {cons("ExecutableConstruct")}
  IfConstruct                            -> ExecutableConstruct     {cons("ExecutableConstruct")}
  SelectTypeConstruct                    -> ExecutableConstruct     {cons("ExecutableConstruct")}
  WhereConstruct                         -> ExecutableConstruct     {cons("ExecutableConstruct")}

%%R214
%%TODO-REMOVE  AssignStmt
%%TODO-REMOVE  AssignedGotoStmt
%%TODO-REMOVE  PauseStmt
%%TODO-REMOVE  StmtFunctionStmt  %% see R1226 comment
%%TODO-REMOVE  AllstopStmt
  AllocateStmt                           -> ActionStmt  {cons("ActionStmt")}
  AssignmentStmt                         -> ActionStmt  {cons("ActionStmt")}
  BackspaceStmt                          -> ActionStmt  {cons("ActionStmt")}
  CallStmt                               -> ActionStmt  {cons("ActionStmt")}
  CloseStmt                              -> ActionStmt  {cons("ActionStmt")}
  ContinueStmt                           -> ActionStmt  {cons("ActionStmt")}
  CycleStmt                              -> ActionStmt  {cons("ActionStmt")}
  DeallocateStmt                         -> ActionStmt  {cons("ActionStmt")}
  EndFunctionStmt                        -> ActionStmt  {cons("ActionStmt")}
  EndMpSubprogramStmt                    -> ActionStmt  {cons("ActionStmt")}
  EndProgramStmt                         -> ActionStmt  {cons("ActionStmt")}
  EndSubroutineStmt                      -> ActionStmt  {cons("ActionStmt")}
  EndfileStmt                            -> ActionStmt  {cons("ActionStmt")}
  ErrorStopStmt                          -> ActionStmt  {cons("ActionStmt")}
  ExitStmt                               -> ActionStmt  {cons("ActionStmt")}
  FlushStmt                              -> ActionStmt  {cons("ActionStmt")}
  ForallStmt                             -> ActionStmt  {cons("ActionStmt")}
  GotoStmt                               -> ActionStmt  {cons("ActionStmt")}
  IfStmt                                 -> ActionStmt  {cons("ActionStmt")}
  InquireStmt                            -> ActionStmt  {cons("ActionStmt")}
  LockStmt                               -> ActionStmt  {cons("ActionStmt")}
  NullifyStmt                            -> ActionStmt  {cons("ActionStmt")}
  OpenStmt                               -> ActionStmt  {cons("ActionStmt")}
  PointerAssignmentStmt                  -> ActionStmt  {cons("ActionStmt")}
  PrintStmt                              -> ActionStmt  {cons("ActionStmt")}
  ReadStmt                               -> ActionStmt  {cons("ActionStmt")}
  ReturnStmt                             -> ActionStmt  {cons("ActionStmt")}
  RewindStmt                             -> ActionStmt  {cons("ActionStmt")}
  StopStmt                               -> ActionStmt  {cons("ActionStmt")}
  SyncAllStmt                            -> ActionStmt  {cons("ActionStmt")}
  SyncImagesStmt                         -> ActionStmt  {cons("ActionStmt")}
  SyncMemoryStmt                         -> ActionStmt  {cons("ActionStmt")}
  UnlockStmt                             -> ActionStmt  {cons("ActionStmt")}
  WaitStmt                               -> ActionStmt  {cons("ActionStmt")}
  WhereStmt                              -> ActionStmt  {cons("ActionStmt")}
  WriteStmt                              -> ActionStmt  {cons("ActionStmt")}
  ArithmeticIfStmt                       -> ActionStmt  {cons("ActionStmt")}
  ComputedGotoStmt                       -> ActionStmt  {cons("ActionStmt")}
%% Following added as replacement for DoConstruct (because ambiguous)
  LabelDoStmt                            -> ActionStmt  {cons("ActionStmt")}
  NonlabelDoStmt                         -> ActionStmt  {cons("ActionStmt")}
  EndDoStmt                              -> ActionStmt  {cons("ActionStmt")}

%%215
  Name                                 -> Keyword     {cons("Keyword")}

%%R1101
%%TODO-REMOVE  ProgramStmt? MainRange                       -> MainProgram      {cons("Mainprogram")}
%%TODO-REMOVE  BodyConstruct+         EndProgramStmt        -> MainRange        {cons("MainRange")}
%%TODO-REMOVE  InternalSubprogramPart EndProgramStmt        -> MainRange        {cons("MainRange")}
%%TODO-REMOVE  EndProgramStmt                               -> MainRange        {cons("MainRange")}

%%TODO-REMOVE  SpecificationPart                            -> BodyConstruct
%%TODO-REMOVE  ExecutableConstruct                          -> BodyConstruct
%%TODO-REMOVE  BodyConstruct+                               -> Body

%%R1101
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  ProgramStmt?
    SpecificationPart
    ExecutionPart
    InternalSubprogramPart?
  EndProgramStmt                               -> MainProgram      {cons("MainProgram")}

%%R1102
  Label? 'PROGRAM'       ProgramName       EOS -> ProgramStmt      {cons("ProgramStmt")}

%%R1103
  Label? 'END' ('PROGRAM' ProgramName?)?   EOS -> EndProgramStmt   {cons("EndProgramStmt")}

%%R1104
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  ModuleStmt
    SpecificationPart
    ModuleSubprogramPart?
  EndModuleStmt                                -> Module           {cons("Module")}

%%R1105
  Label? 'MODULE' ModuleName               EOS -> ModuleStmt       {cons("ModuleStmt")}

%%R1106
  Label? 'END' ('MODULE' ModuleName?)?     EOS -> EndModuleStmt    {cons("EndModuleStmt")}

%%TODO-DELETE  SpecificationPartConstruct                   -> ModuleBody
%%TODO-DELETE  ModuleSubprogramPartConstruct                -> ModuleBody
%%TODO-DELETE  ModuleBody SpecificationPartConstruct        -> ModuleBody
%%TODO-DELETE  ModuleBody ModuleSubprogramPartConstruct     -> ModuleBody

%%R1107
  ContainsStmt ModuleSubprogram*               -> ModuleSubprogramPart  {cons("ModuleSubprogramPart")}

%%R1108
  FunctionSubprogram                           -> ModuleSubprogram      {cons("ModuleSubprogram")}
  SubroutineSubprogram                         -> ModuleSubprogram      {cons("ModuleSubprogram")}
  SeparateModuleSubprogram                     -> ModuleSubprogram      {cons("ModuleSubprogram")}

%%R1109
  Label? 'USE' ((',' ModuleNature)? '::')? ModuleName
           (','            RenameList   )?              EOS -> UseStmt  {cons("UseStmt_Rename")}
  Label? 'USE' ((',' ModuleNature)? '::')? ModuleName
            ',' 'ONLY' ':' OnlyList?                    EOS -> UseStmt  {cons("UseStmt_Only")}

%%R1110
  'INTRINSIC'                                  -> ModuleNature  {cons("ModuleNature_INTRINSIC")}
  'NON_INTRINSIC'                              -> ModuleNature  {cons("ModuleNature_NON_INTRINSIC")}

%%R1111
  LocalName
     '=>' UseName                              -> Rename      {cons("Rename")}
  'OPERATOR' '(' LocalDefinedOperator ')'
     '=>'
  'OPERATOR' '(' UseDefinedOperator   ')'      -> Rename      {cons("Rename")}
  {Rename ','}+                                -> RenameList  {cons("RenameList")}

%%R1112
%%AMB-TODO-F08 PUTBACK    GenericSpec
  OnlyUseName                                  -> Only        {cons("Only")}
  Rename                                       -> Only        {cons("Only")}
  {Only ','}+                                  -> OnlyList    {cons("OnlyList")}

%%R1113
  Ident                                        -> OnlyUseName {cons("OnlyUseName")}

%%R1114
  DefinedUnaryOp                               -> LocalDefinedOperator  {cons("LocalDefinedOperator")}
  DefinedBinaryOp                              -> LocalDefinedOperator  {cons("LocalDefinedOperator")}

%%R1115
  DefinedUnaryOp                               -> UseDefinedOperator    {cons("UseDefinedOperator")}
  DefinedBinaryOp                              -> UseDefinedOperator    {cons("UseDefinedOperator")}

%%R1116
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  SubmoduleStmt
    SpecificationPart
    ModuleSubprogramPart?
  EndSubmoduleStmt                             -> Submodule         {cons("Submodule")}

%%R1117
  Label? 'SUBMODULE' '(' ParentIdentifier ')'
         SubmoduleName                       EOS -> SubmoduleStmt     {cons("SubmoduleStmt")}

%%R1118
  AncestorModuleName (':' ParentSubmoduleName)?  -> ParentIdentifier  {cons("ParentIdentifier")}

%%R1119
  Label? 'END' ('SUBMODULE' SubmoduleName?)? EOS -> EndSubmoduleStmt  {cons("EndSubmoduleStmt")}

%%R1120
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  BlockDataStmt
    SpecificationPart
  EndBlockDataStmt                               -> BlockData         {cons("BlockData")}

%%R1121
  Label? 'BLOCK' 'DATA' BlockDataName?       EOS -> BlockDataStmt     {cons("BlockDataStmt")}

%%R1122
  Label? 'END' 'BLOCK' 'DATA' BlockDataName? EOS -> EndBlockDataStmt  {cons("EndBlockDataStmt")}
  Label? 'END'                               EOS -> EndBlockDataStmt  {cons("EndBlockDataStmt")}

%%context-free priorities
%%
%%   OnlyUseName -> Only  {cons("Only_OUN")}
%% > GenericSpec -> Only  {cons("Only_GS")}
