
%%module languages/fortran/syntax/FortranLex
module FortranLex
%%
%% Input restrictions:
%% -Make sure that the last statement at the end of the file has a '\n' to prevent a parse error.
%% -Userdefined operators (.XYZ.) are not handled yet
%% -include 'file' lines must first be processed or make it a comment (put a ! in front)
%%
%% F77 fixed format text can also be parsed if some pre-processing is done first,
%% Minimal changes needed for fixed form source handling:
%% a. change continuation symbols in 6th column by a & on the previous line (but not in a comment of course)
%%    in VIM regexp: :g/^     [^ ]/-1s/$/ \&/ followed by :%/^     [^ ]/      / (5 spaces+nonspace -> 6 spaces) 
%% b. change every comment-symbol (* or C) in the first column into a !.
%%    in VIM regexp: %s/^[C\*]/!/


exports
 
sorts
  BinaryConstant Character Comma Comment StartCommentBlock
  Continuation Dop EOL EOLOrSemicolon EOS HexConstant
  Icon Ident Label LblDef LblRef
  Letter OctalConstant
  Rcon ScalarIntLiteralConstant Scon
  SconDouble SconSingle 

%%TODO-DELETE  SignedIntLiteralConstant            %% R406
%%TODO-DELETE  IntLiteralConstant                  %% R407
%%TODO-DELETE  Sign                                %% R411

%%TODO-F08  FixedComment

%% Ident Aliases:
  Name
  AncestorModuleName ArgName ArrayName AssociateConstructName AssociateName
  BindingName BlockConstructName BlockDataName
  CaseConstructName CoarrayName ComponentName ConstructName CriticalConstructName
  DataPointerComponentName DoConstructName
  EntityName
  GenericName NamelistGroupName EndName CommonBlockName
  EntryName ExternalName FinalSubroutineName ForallConstructName
  FunctionName
  IfConstructName ImpliedDoVariable ImportName
  IndexName InterfaceName IntrinsicProcedureName LocalName
  ModuleName ObjectName
  ParentSubmoduleName ParentTypeName PartName ProcedureName
  ProcedureComponentName ProcedureEntityName ProcEntityName
  ProgramName ResultName
  ScalarIntConstantName ScalarIntVariableName ScalarVariableName
  SelectConstructName SubmoduleName SubroutineName
  SubroutineNameUse TypeName TypeParamName VariableName UseName
  

lexical syntax

  ','    -> Comma

%% \r\n needed for DOS files
%%
  [\n]      -> EOL
  [\r] [\n] -> EOL

%% semicolon acts like an EOL
%%
  EOL       -> EOLOrSemicolon
  ";"       -> EOLOrSemicolon

%% Everything following a ! is comment. With the \n it is an End of Statement
%% Treat preprocessor directives as comments
%% TODO-F08 enforce leading pound character
%% TODO-F08 name # as Directive and fix
%%
  "!" ~[\n\r]*                            -> Comment
  "#" ~[\n\r]*                            -> Comment

  (Comment? EOLOrSemicolon [\ \t]* )+     -> EOS

%% Fixed source form comment rules (beware of code starting in 1st column!)
%%TODO-F08 - need different language lexer for fixed format, don't combine
%%TODO-F08
%%TODO-F08  (EOL [Cc\*] ~[\n\r]*)+        -> FixedComment
%%TODO-F08   FixedComment EOL [\ \t]*     -> EOS

%% commentlines at the start of a file/program are handled separately in Fortran90.sdf
  EOS  -> StartCommentBlock

%% Continuation can optionally be separated by comment.
%% The & on the next line is also optional.
%%
   "&" [\ \t]* ("!" ~[\n\r]*)? EOL ( [\ \t]+ "&" )?  -> Continuation
   Continuation                                      -> LAYOUT    
   Continuation [\ \t]* "!" ~[\n\r]* EOL             -> LAYOUT    

%% Layout does NOT have a \n since that's part of EOS
   [\ \t] -> LAYOUT

%% number as label: max 5 digits with space in 6th pos
    [0-9][0-9][0-9][0-9][0-9]    -> Label
    [0-9][0-9][0-9][0-9]         -> Label
    [0-9][0-9][0-9]              -> Label   
    [0-9][0-9]                   -> Label
    [0-9]                        -> Label


%%3.1.2
  [a-zA-Z]                       -> Letter
  [A-Za-z][A-Za-z0-9\_]*         -> Ident
%% Integer Constant
  [0-9]+                         -> Icon

%%R420 Character constants allow '' and "" as escaped ' and " in string literals like 'don''t' (="don't")
%% separate names needed for lexical restrictions later 
%% NOTE: continuated strings like 'hello&\n   &world' will be parsed as one string with & embedded.
  [\'] (~[\'] | "''")*  [\']    -> SconSingle
  [\"] (~[\"] | '""')*  [\"]    -> SconDouble
  SconSingle | SconDouble       -> Scon

%%R301: character definition with the 21 specials from table 3.1
  [a-zA-Z0-9\ \=\+\-\*\/\(\)\,\;\'\:\!\"\%\&\<\>\\\?\$] -> Character

%%R412-R416 Real and Double Literal Constant. Kind is handled in R400Datatypes.sdf
%% [sign] significant [exponent-letter exponent] [__kind-param]
%% JD: [\+\-]? removed because of Sign in R707
          [0-9]+ "." [0-9]* ([EeDd] [\+\-]? [0-9]+)?            -> Rcon
%% [sign] digit-string exponent-letter exponent [__kind-param]
                 "." [0-9]+ ([EeDd] [\+\-]? [0-9]+)?            -> Rcon
%% or [sign] digit-string exponent-letter exponent [__kind-param]
          [0-9]+ [EeDd] [\+\-]? [0-9]+                          -> Rcon

%%R406
%%TODO-DELETE  Sign? IntLiteralConstant         -> SignedIntLiteralConstant

%%R408
  [Bb] [\'] [01]+ [\']             -> BinaryConstant
  [Bb] [\"] [01]+ [\"]             -> BinaryConstant
%%R409
  [Oo] [\'] [0-7]+ [\']            -> OctalConstant
  [Oo] [\"] [0-7]+ [\']            -> OctalConstant
%%R410
  [Zz] [\'] [0-9A-Fa-f]+ [\"]      -> HexConstant
  [Zz] [\"] [0-9A-Fa-f]+ [\"]      -> HexConstant

%%R411
%%TODO-DELETE    '+' | '-'                      -> Sign

%%
  [0-9]+                        -> ScalarIntLiteralConstant 

%%R703,R723 defined-unary-operator and defined-binary-operator
  "." Letter+ "."               -> Dop
  '.EQ.'                        -> Dop  {reject}
  '.NE.'                        -> Dop  {reject}
  '.LT.'                        -> Dop  {reject}
  '.LE.'                        -> Dop  {reject}
  '.GT.'                        -> Dop  {reject}
  '.GE.'                        -> Dop  {reject}
  '.NOT.'                       -> Dop  {reject}
  '.AND.'                       -> Dop  {reject}
  '.OR.'                        -> Dop  {reject}
  '.EQV.'                       -> Dop  {reject}
  '.NEQV.'                      -> Dop  {reject}

lexical restrictions
  SconSingle -/- [\']
  SconDouble -/- [\"]

%% commentline should be the complete line until newline. This must be lexical restriction
%%   Comment  -/- ~[\n\r]  

%% if  (Comment "\n" [\ \t]* )+ -> EOS, then to prevent ambig with layout:
   EOS -/- [\ \t]

context-free restrictions

   Continuation? -/- ~[\n\r]

%% layout definition **without** \n due to the EOS definition. Lines are important in Fortran.
%% Continuation-char & should be part of continuation, so not layout.
   LAYOUT? -/- [\ \t\&]

%% to prevent layout/comment parsed as after LblDef (which causes ambigs)
   LblDef -/- [\!]

context-free syntax

  Label  -> LblDef                        {cons("Label")}
  Label  -> LblRef                        {cons("Label")}

%% Ident Aliasses. TODO: put them in the right modules.
  Ident  -> Name                          {cons("Name")}
  Ident  -> AncestorModuleName
  Ident  -> AssociateConstructName
  Ident  -> AssociateName
  Ident  -> ArgName
  Ident  -> ArrayName
  Ident  -> BindingName                   {cons("BindingName")}
  Ident  -> BlockConstructName
  Ident  -> BlockDataName
  Ident  -> CaseConstructName
  Ident  -> CriticalConstructName
  Ident  -> CoarrayName                   {cons("CoarrayName")}
  Ident  -> CommonBlockName
  Ident  -> ComponentName
  Ident  -> ConstructName
  Ident  -> DataPointerComponentName
  Ident  -> DoConstructName
  Ident  -> EndName
  Ident  -> EntityName
  Ident  -> EntryName
  Ident  -> ExternalName
  Ident  -> FinalSubroutineName
  Ident  -> ForallConstructName
  Ident  -> FunctionName                  {cons("FunctionName")}
  Ident  -> GenericName                   {cons("GenericName")}
  Ident  -> IfConstructName
  Ident  -> ImpliedDoVariable
  Ident  -> ImportName
  Ident  -> InterfaceName
  Ident  -> IndexName
  Ident  -> IntrinsicProcedureName
  Ident  -> LocalName
  Ident  -> ModuleName                    {cons("ModuleName")}
  Ident  -> NamelistGroupName
  Ident  -> ObjectName                    {cons("ObjectName")}
  Ident  -> ParentSubmoduleName
  Ident  -> ParentTypeName
  Ident  -> PartName
  Ident  -> ProcedureComponentName
  Ident  -> ProcedureEntityName
  Ident  -> ProcedureName                 {cons("ProcedureName")}
  Ident  -> ProcEntityName
  Ident  -> ProgramName                   {cons("ProgramName")}
  Ident  -> ResultName
  Ident  -> ScalarIntConstantName
  Ident  -> ScalarIntVariableName
  Ident  -> ScalarVariableName
  Ident  -> SelectConstructName
  Ident  -> SubmoduleName
  Ident  -> SubroutineName                {cons("SubroutineName")}
  Ident  -> SubroutineNameUse
  Ident  -> TypeName                      {cons("TypeName")}
  Ident  -> TypeParamName
  Ident  -> UseName
  Ident  -> VariableName
