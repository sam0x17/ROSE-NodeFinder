      
%%%%%%%%%%
%%Fortran ISO/IEC 1539:1991 section R5xx Data Object declarations and Specifications
%%%%%%%%%%

%%module languages/fortran/syntax/R500DataDeclarations
module R500DataDeclarations

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/R400DataTypes
  %% languages/fortran/syntax/R700Expressions

  FortranLex
  R400DataTypes
  R700Expressions

exports

sorts

%% 5.2 Type declaration statements

  TypeDeclarationStmt                 %% R501
  AttrSpec                            %% R502
  EntityDecl                          %% R503
                                      %% R504  ObjectName - lex
  Initialization                      %% R505
  NullInit                            %% R506

  EntityDeclList

%% 5.3 Attributes

  AccessSpec                          %% R507
  LanguageBindingSpec                 %% R508
  CoarraySpec                         %% R509
  DeferredCoshapeSpec                 %% R510
  ExplicitCoshapeSpec                 %% R511
  LowerCobound                        %% R512
  UpperCobound                        %% R513
  DimensionSpec                       %% R514
  ArraySpec                           %% R515  
  ExplicitShapeSpec                   %% R516
  LowerBound                          %% R517
  UpperBound                          %% R518
  AssumedShapeSpec                    %% R519
  DeferredShapeSpec                   %% R520
  AssumedSizeSpec                     %% R521
  AssumedRankSpec                     %% R522a TR 29113
  ImpliedShapeSpec                    %% R522
  IntentSpec                          %% R523

  AssumedShapeSpecList AttrSpecList DeferredCoshapeSpecList
  DeferredShapeSpecList ExplicitShapeSpecList ImpliedShapeSpecList

%% 5.4 Attribute specification statements

  AccessStmt                          %% R524
  AccessId                            %% R525
  AllocatableStmt                     %% R526
  AllocatableDecl                     %% R527
  AsynchronousStmt                    %% R528
  BindStmt                            %% R529
  BindEntity                          %% R530
  CodimensionStmt                     %% R531
  CodimensionDecl                     %% R532
  ContiguousStmt                      %% R533
  DataStmt                            %% R534
  DataStmtSet                         %% R535
  DataStmtObject                      %% R536
  DataImpliedDo                       %% R537
  DataIDoObject                       %% R538
  DataIDoVariable                     %% R539
  DataStmtValue                       %% R540
  DataStmtRepeat                      %% R541
  DataStmtConstant                    %% R542
  IntConstantSubobject                %% R543
  ConstantSubobject                   %% R544
  DimensionStmt                       %% R545
  IntentStmt                          %% R546
  OptionalStmt                        %% R547
  ParameterStmt                       %% R548
  NamedConstantDef                    %% R549
  PointerStmt                         %% R550
  PointerDecl                         %% R551
  ProtectedStmt                       %% R552
  SaveStmt                            %% R553
  SavedEntity                         %% R554
  ProcPointerName                     %% R555
  TargetStmt                          %% R556
  TargetDecl                          %% R557
  ValueStmt                           %% R558
  VolatileStmt                        %% R559

  AccessIdList AllocatableDeclList BindEntityList CodimensionDeclList
  DataIDoObjectList DataStmtObjectList DataStmtSetList DataStmtValueList
  NamedConstantDefList PointerDeclList SavedEntityList TargetDeclList

%% 5.5 Implicit statement

  ImplicitStmt                        %% R560
  ImplicitSpec                        %% R561
  LetterSpec                          %% R562

  ImplicitSpecList
  LetterSpecList

%% 5.6 Namelist statement

  NamelistStmt                        %% R563
  NamelistGroupObject                 %% R564

  NamelistGroupObjectList

%% 5.7 Storage association of data objects

  EquivalenceStmt                     %% R565
  EquivalenceSet                      %% R566
  EquivalenceObject                   %% R567
  CommonStmt                          %% R568
  CommonBlockObject                   %% R569

  CommonBlockObjectList DummyArgNameList EntityNameList
  EquivalenceObjectList EquivalenceSetList ObjectNameList

context-free syntax


%% 5.2 Type declaration statements
%%

%%R501
  Label? DeclarationTypeSpec
          ((',' AttrSpecList)? '::')? EntityDeclList  EOS -> TypeDeclarationStmt {cons("TypeDeclarationStmt")}

%%R502
   AccessSpec                                             -> AttrSpec     {cons("AttrSpec_AS")}
  'ALLOCATABLE'                                           -> AttrSpec     {cons("AttrSpec_ALLOCATABLE")}
  'ASYNCHRONOUS'                                          -> AttrSpec     {cons("AttrSpec_ASYNCHRONOUS")}
  'CODIMENSION' '[' CoarraySpec ']'                       -> AttrSpec     {cons("AttrSpec_CODIMENSION")}
  'CONTIGUOUS'                                            -> AttrSpec     {cons("AttrSpec_CONTIGUOUS")}
  'DIMENSION' '(' ArraySpec ')'                           -> AttrSpec     {cons("AttrSpec_DIMENSION")}
  'EXTERNAL'                                              -> AttrSpec     {cons("AttrSpec_EXTERNAL")}
  'INTENT' '(' IntentSpec ')'                             -> AttrSpec     {cons("AttrSpec_INTENT")}
  'INTRINSIC'                                             -> AttrSpec     {cons("AttrSpec_INTRINSIC")}
   LanguageBindingSpec                                    -> AttrSpec     {cons("AttrSpec_LBS")}
  'OPTIONAL'                                              -> AttrSpec     {cons("AttrSpec_OPTIONAL")}
  'PARAMETER'                                             -> AttrSpec     {cons("AttrSpec_PARAMETER")}
  'POINTER'                                               -> AttrSpec     {cons("AttrSpec_POINTER")}
  'PROTECTED'                                             -> AttrSpec     {cons("AttrSpec_PROTECTED")}
  'SAVE'                                                  -> AttrSpec     {cons("AttrSpec_SAVE")}
  'TARGET'                                                -> AttrSpec     {cons("AttrSpec_TARGET")}
  'VALUE'                                                 -> AttrSpec     {cons("AttrSpec_VALUE")}
  'VOLATILE'                                              -> AttrSpec     {cons("AttrSpec_VOLATILE")}
  {AttrSpec ','}+                                         -> AttrSpecList {cons("AttrSpecList")}

%%R503
  ObjectName    ( '(' ArraySpec ')'   )?
                ( '[' CoarraySpec ']' )?
                ( '*' CharLength      )?
                   Initialization?                      -> EntityDecl     {cons("EntityDecl")}
%%| FunctionName( '*' CharLength      )?  %%Ambiguous with object-name
%%
{EntityDecl ','}+                                       -> EntityDeclList {cons("EntityDeclList")}

%%R504
%%Name - lex

%%R505
  '='   ConstantExpr                                    -> Initialization  {cons("Initialization")}
  '=>'  NullInit                                        -> Initialization  {cons("Initialization")}
  '=>'  InitialDataTarget                               -> Initialization  {cons("Initialization")}

%%R506
  FunctionReference                                     -> NullInit        {cons("NullInit")}


%% 5.3 Attributes
%%

%%R507
  'PUBLIC'                                              -> AccessSpec      {cons("AccessSpec_PUBLIC")}
  'PRIVATE'                                             -> AccessSpec      {cons("AccessSpec_PRIVATE")}

%%R508
%%       Scon substituted for scalar-default-char-constant-expr
%%
  'BIND' '(' 'C' (',' 'NAME' '=' Scon)? ')'    -> LanguageBindingSpec      {cons("LanguageBindingSpec")}

%%R509
  DeferredCoshapeSpecList              -> CoarraySpec             {cons("CoarraySpec")}
  ExplicitCoshapeSpec                  -> CoarraySpec             {cons("CoarraySpec")}

%%R510
  ':'                                  -> DeferredCoshapeSpec     {cons("DeferredCoshapeSpec")}
  {DeferredCoshapeSpec ','}+           -> DeferredCoshapeSpecList {cons("DeferredCoshapeSpecList")}

%%511
  ( ( LowerCobound ':' )? UpperCobound ',' )*
    ( LowerCobound ':' )?
  '*'                                  -> ExplicitCoshapeSpec  {cons("ExplicitCoshapeSpec")}

%%R512
  SpecificationExpr                    -> LowerCobound         {cons("LowerCobound")}

%%R513
  SpecificationExpr                    -> UpperCobound         {cons("UpperCobound")}

%%R514
  'DIMENSION' '(' ArraySpec ')'        -> DimensionSpec        {cons("DimensionSpec")}

%%R515
  ExplicitShapeSpecList                -> ArraySpec            {cons("ArraySpec")}
  AssumedShapeSpecList                 -> ArraySpec            {cons("ArraySpec")}
  DeferredShapeSpecList                -> ArraySpec            {cons("ArraySpec")}
  AssumedSizeSpec                      -> ArraySpec            {cons("ArraySpec")}
  ImpliedShapeSpecList                 -> ArraySpec            {cons("ArraySpec")}
  AssumedRankSpec                      -> ArraySpec            {cons("ArraySpec")}

%%R516
  (LowerBound ':')? UpperBound                  -> ExplicitShapeSpec     {cons("ExplicitShapeSpec")}
  {ExplicitShapeSpec ','}+                      -> ExplicitShapeSpecList {cons("ExplicitShapeSpecList")}

%%R517
  SpecificationExpr                             -> LowerBound            {cons("LowerBound")}

%%R518
  SpecificationExpr                             -> UpperBound            {cons("UpperBound")}

%%R519
  LowerBound? ':'                               -> AssumedShapeSpec      {cons("AssumedShapeSpec")}
  {AssumedShapeSpec ','}+                       -> AssumedShapeSpecList  {cons("AssumedShapeSpecList")}

%%R520
  ':'                                           -> DeferredShapeSpec     {cons("DeferredShapeSpec")}
  {DeferredShapeSpec ','}+                      -> DeferredShapeSpecList {cons("DeferredShapeSpecList")}

%%R521
%%AMB: explicit-shape-spec list made non-empty to remove ambiguity with implied-shape-spec-list
%%
  (ExplicitShapeSpec ',')+ (LowerBound ':')? '*'  -> AssumedSizeSpec    {cons("AssumedSizeSpec")}

%%R522a
  '..'                                          -> AssumedRankSpec      {cons("AssumedRankSpec")}

%%R522
  (LowerBound ':')? '*'                         -> ImpliedShapeSpec     {cons("ImpliedShapeSpec")}
  {ImpliedShapeSpec ','}+                       -> ImpliedShapeSpecList {cons("ImpliedShapeSpecList")}

%%R523
  'IN'                                          -> IntentSpec  {cons("IntentSpec_IN")}
  'OUT'                                         -> IntentSpec  {cons("IntentSpec_OUT")}
  'IN' 'OUT'                                    -> IntentSpec  {cons("IntentSpec_INOUT")}


%% 5.4 Attribute specification statements
%%

%%R524
  Label? AccessSpec '::'? AccessIdList                  EOS -> AccessStmt   {cons("AccessStmt")}
  Label? AccessSpec                                     EOS -> AccessStmt   {cons("AccessStmt")}

%%R525
%%UseName           %% ambiguous with generic-spec
  GenericSpec                                               -> AccessId     {cons("AccessId")}
  {AccessId ','}+                                           -> AccessIdList {cons("AccessIdList")}

%%R526
  Label? 'ALLOCATABLE' '::' AllocatableDeclList         EOS -> AllocatableStmt  {cons("AllocatableStmt")}
  Label? 'ALLOCATABLE'      AllocatableDeclList         EOS -> AllocatableStmt  {cons("AllocatableStmt")}

%%R527
  ObjectName ( '(' ArraySpec   ')' )?
             ( '[' CoarraySpec ']' )?                       -> AllocatableDecl     {cons("AllocatableDecl")}
  {AllocatableDecl ','}+                                    -> AllocatableDeclList {cons("AllocatableDeclList")}

%%R528
  Label? 'ASYNCHRONOUS' '::' ObjectNameList             EOS -> AsynchronousStmt {cons("AsynchronousStmt")}
  Label? 'ASYNCHRONOUS'      ObjectNameList             EOS -> AsynchronousStmt {cons("AsynchronousStmt")}

%%R529
  Label? LanguageBindingSpec '::' BindEntityList        EOS -> BindStmt         {cons("BindStmt")}
  Label? LanguageBindingSpec      BindEntityList        EOS -> BindStmt         {cons("BindStmt")}

%%R530
  EntityName                                                -> BindEntity       {cons("BindEntity_EN")}
  '/' CommonBlockName '/'                                   -> BindEntity       {cons("BindEntity_CBN")}
  {BindEntity ','}+                                         -> BindEntityList   {cons("BindEntityList")}

%%R531
  Label? 'CODIMENSION' '::' CodimensionDeclList         EOS -> CodimensionStmt  {cons("CodimensionStmt")}
  Label? 'CODIMENSION'      CodimensionDeclList         EOS -> CodimensionStmt  {cons("CodimensionStmt")}

%%R532
  CoarrayName '[' CoarraySpec ']'                           -> CodimensionDecl     {cons("CodimensionDecl")}
  {CodimensionDecl ','}+                                    -> CodimensionDeclList {cons("CodimensionDeclList")}

%%R533
  Label? 'CONTIGUOUS' '::' ObjectNameList               EOS -> ContiguousStmt   {cons("ContiguousStmt")}
  Label? 'CONTIGUOUS'      ObjectNameList               EOS -> ContiguousStmt   {cons("ContiguousStmt")}

  {ObjectName ','}+                                         -> ObjectNameList   {cons("ObjectNameList")}

%%R534
  Label? 'DATA' DataStmtSetList                         EOS -> DataStmt         {cons("DataStmt")}

%%R535
  DataStmtObjectList '/' DataStmtValueList '/'              -> DataStmtSet      {cons("DataStmtSet")}
  DataStmtSet                                               -> DataStmtSetList  {cons("DataStmtSetList")}
  DataStmtSetList ',' DataStmtSet                           -> DataStmtSetList  {cons("DataStmtSetList")}
  DataStmtSetList     DataStmtSet                           -> DataStmtSetList  {cons("DataStmtSetList")}

%%R536
  Variable                                                  -> DataStmtObject     {cons("DataStmtObject")}
  DataImpliedDo                                             -> DataStmtObject     {cons("DataStmtObject")}
  {DataStmtObject ','}+                                     -> DataStmtObjectList {cons("DataStmtObjectList")}

%%R537
%%         expr substituted for scalar-int-constant-expr
%%
  '('
       DataIDoObjectList ',' DataIDoVariable
          '=' Expr ',' Expr (',' Expr)?
  ')'                                                       -> DataImpliedDo    {cons("DataImpliedDo")}

%%R538
  ArrayElement                                              -> DataIDoObject    {cons("DataIDoObject")}
  StructureComponent                                        -> DataIDoObject    {cons("DataIDoObject")}
  DataImpliedDo                                             -> DataIDoObject    {cons("DataIDoObject")}
  {DataIDoObject ','}+                                      -> DataIDoObjectList{cons("DataIDoObjectList")}

%%R539
  DoVariable                                                -> DataIDoVariable  {cons("DataIDoVariable")}

%%R540
  (DataStmtRepeat '*')? DataStmtConstant                    -> DataStmtValue    {cons("DataStmtValue")}
  {DataStmtValue ','}+                                      -> DataStmtValueList{cons("DataStmtValueList")}
  
%%541
%%         Icon substituted for scalar-int-constant
%%         int-constant-subobject substituted for scalar-int-constant-subobject
%%
  Icon                                                      -> DataStmtRepeat   {cons("DataStmtRepeat")}
  IntConstantSubobject                                      -> DataStmtRepeat   {cons("DataStmtRepeat")}

%%R542
%%       constant substituted for scalar-constant
%%       constant-subobject substituted for scalar-constant-subobject
%%
  Constant                                                  -> DataStmtConstant  {cons("DataStmtConstant")}
  ConstantSubobject                                         -> DataStmtConstant  {cons("DataStmtConstant")}
  SignedIntLiteralConstant                                  -> DataStmtConstant  {cons("DataStmtConstant")}
  SignedRealLiteralConstant                                 -> DataStmtConstant  {cons("DataStmtConstant")}
  NullInit                                                  -> DataStmtConstant  {cons("DataStmtConstant")}
  InitialDataTarget                                         -> DataStmtConstant  {cons("DataStmtConstant")}
  StructureConstructor                                      -> DataStmtConstant  {cons("DataStmtConstant")}

%%R543
  ConstantSubobject                                         -> IntConstantSubobject  {cons("IntConstantSubobject")}

%%R544
  Designator                                                -> ConstantSubobject {cons("ConstantSubobject")}

%%R545
  Label? 'DIMENSION' '::'
                           ArrayName '(' ArraySpec ')'
                      (',' ArrayName '(' ArraySpec ')')*   EOS -> DimensionStmt  {cons("DimensionStmt")}
  Label? 'DIMENSION'
                           ArrayName '(' ArraySpec ')'
                      (',' ArrayName '(' ArraySpec ')')*   EOS -> DimensionStmt  {cons("DimensionStmt")}

%%R546
  Label? 'INTENT' '(' IntentSpec ')' '::' DummyArgNameList EOS -> IntentStmt   {cons("IntentStmt")}
  Label? 'INTENT' '(' IntentSpec ')'      DummyArgNameList EOS -> IntentStmt   {cons("IntentStmt")}

  {DummyArgName ','}+                                          -> DummyArgNameList {cons("DummyArgNameList")}

%%R547
  Label? 'OPTIONAL' '::' DummyArgNameList                  EOS -> OptionalStmt {cons("OptionalStmt")}
  Label? 'OPTIONAL'      DummyArgNameList                  EOS -> OptionalStmt {cons("OptionalStmt")}

%%R548
  Label? 'PARAMETER' '(' NamedConstantDefList ')'          EOS -> ParameterStmt   {cons("ParameterStmt")}

%%R549
  NamedConstant '=' ConstantExpr                               -> NamedConstantDef     {cons("NamedConstantDef")}
  {NamedConstantDef ','}+                                      -> NamedConstantDefList {cons("NamedConstantDefList")}

%%R550
  Label? 'POINTER' '::' PointerDeclList                    EOS -> PointerStmt     {cons("PointerStmt")}
  Label? 'POINTER'      PointerDeclList                    EOS -> PointerStmt     {cons("PointerStmt")}

%%R551
  ObjectName ( '(' DeferredShapeSpecList ')' )?                -> PointerDecl     {cons("PointerDecl")}
  ProcEntityName                                               -> PointerDecl     {cons("PointerDecl")}
  {PointerDecl ','}+                                           -> PointerDeclList {cons("PointerDeclList")}

%%R552
  Label? 'PROTECTED' '::' EntityNameList                   EOS -> ProtectedStmt   {cons("ProtectedStmt")}
  Label? 'PROTECTED'      EntityNameList                   EOS -> ProtectedStmt   {cons("ProtectedStmt")}

  {EntityName ','}+                                            -> EntityNameList  {cons("EntityNameList")}

%%R553
  Label? 'SAVE' '::'? SavedEntityList                      EOS -> SaveStmt        {cons("SaveStmt")}
  Label? 'SAVE'                                            EOS -> SaveStmt        {cons("SaveStmt")}

%%R554
  ObjectName                                                   -> SavedEntity     {cons("SavedEntity")}
%%ProcPointerName           %% Ambiguous with object-name
  '/' CommonBlockName '/'                                      -> SavedEntity     {cons("SavedEntity")}
  {SavedEntity ','}+                                           -> SavedEntityList {cons("SavedEntityList")}

%%R555
  Ident                                                        -> ProcPointerName {cons("ProcPointerName")}

%%R556
  Label? 'TARGET' '::' TargetDeclList                      EOS -> TargetStmt   {cons("TargetStmt")}
  Label? 'TARGET'      TargetDeclList                      EOS -> TargetStmt   {cons("TargetStmt")}

%%R557
  ObjectName ( '(' ArraySpec   ')' )?
             ( '[' CoarraySpec ']' )?                          -> TargetDecl     {cons("TargetDecl")}
  {TargetDecl ','}+                                            -> TargetDeclList {cons("TargetDeclList")}

%%R558
  Label? 'VALUE' '::' DummyArgNameList                     EOS -> ValueStmt    {cons("ValueStmt")}
  Label? 'VALUE'      DummyArgNameList                     EOS -> ValueStmt    {cons("ValueStmt")}

%%R559
  Label? 'VOLATILE' '::' ObjectNameList                    EOS -> VolatileStmt {cons("VolatileStmt")}
  Label? 'VOLATILE'      ObjectNameList                    EOS -> VolatileStmt {cons("VolatileStmt")}


%% 5.5 Implicit statement
%%

%%R560
  Label? 'IMPLICIT' ImplicitSpecList               EOS -> ImplicitStmt    {cons("ImplicitStmt")}
  Label? 'IMPLICIT' 'NONE'                         EOS -> ImplicitStmt    {cons("ImplicitStmt")}

%%R561
  DeclarationTypeSpec '(' LetterSpecList ')'           -> ImplicitSpec    {cons("ImplicitSpec")}
  {ImplicitSpec ','}+                                  -> ImplicitSpecList{cons("ImplicitSpecList")}

%%R562
  Letter ('-' Letter)?                                 -> LetterSpec      {cons("LetterSpec")}
  {LetterSpec ','}+                                    -> LetterSpecList  {cons("LetterSpecList")}


%% 5.6 Namelist statement
%%

%%R563
%%TODO - inline NamelistGroup?
  Label? 'NAMELIST'
           '/' NamelistGroupName '/' NamelistGroupObjectList
    ( ','? '/' NamelistGroupName '/' NamelistGroupObjectList )*
                                                         EOS -> NamelistStmt        {cons("NamelistStmt")}

%%R564
  VariableName                                               -> NamelistGroupObject {cons("NamelistGroupObject")}
  {NamelistGroupObject ','}+                                 -> NamelistGroupObjectList {cons("NamelistGroupObjectList")}


%% 5.7 Storage association of data objects
%%

%%R565
  Label? 'EQUIVALENCE' EquivalenceSetList                EOS -> EquivalenceStmt   {cons("EquivalenceStmt")}

%%R566
  '(' EquivalenceObject ',' EquivalenceObjectList ')'        -> EquivalenceSet    {cons("EquivalenceSet")}
  {EquivalenceSet ','}+                                      -> EquivalenceSetList{cons("EquivalenceSetList")}

%%R567
  Variable                                                   -> EquivalenceObject {cons("EquivalenceObject")}
%%ArrayElement     %% Ambiguous - included in variable
%%Substring        %% Ambiguous - included in variable
  {EquivalenceObject ','}+                                   -> EquivalenceObjectList {cons("EquivalenceObjectList")}

%%R568
  Label? 'COMMON'
              ('/' CommonBlockName? '/')? CommonBlockObjectList
    (','?  '/' CommonBlockName? '/'   CommonBlockObjectList )*
                                                         EOS -> CommonStmt  {cons("CommonStmt")}
%%R569
  VariableName ( '(' ArraySpec ')' )?                        -> CommonBlockObject     {cons("CommonBlockObject")}
  {CommonBlockObject ','}+                                   -> CommonBlockObjectList {cons("CommonBlockObjectList")}