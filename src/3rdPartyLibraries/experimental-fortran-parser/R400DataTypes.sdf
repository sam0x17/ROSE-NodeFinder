      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 4xx DataTypes
%%%%%%%%%%

%%module languages/fortran/syntax/R400DataTypes
module R400DataTypes

imports
%%  languages/fortran/syntax/FortranLex
%%  languages/fortran/syntax/R500DataDeclarations
  FortranLex
  R500DataDeclarations

exports

sorts

%% 3.2 Low-level syntax

  Constant                            %% R304
  LiteralConstant                     %% R305
  NamedConstant                       %% R306
  IntConstant                         %% R307
  CharConstant                        %% R308

%% 4.2 Type parameters

  TypeParamValue                      %% R401

%% 4.3 Relationship of types and values to objects

  TypeSpec                            %% R402
  DeclarationTypeSpec                 %% R403

%% 4.4 Intrinsic types

  IntrinsicTypeSpec                   %% R404
  KindSelector                        %% R405
  SignedIntLiteralConstant            %% R406
  IntLiteralConstant                  %% R407
  KindParam                           %% R408
  SignedDigitString                   %% R409
  DigitString                         %% R410
  Sign                                %% R411
  SignedRealLiteralConstant           %% R412
  RealLiteralConstant                 %% R413
                                      %% R414  Significand    - lex
                                      %% R415  ExponentLetter - lex
                                      %% R416  Exponent       - lex
  ComplexLiteralConstant              %% R417
  RealPart                            %% R418
  ImagPart                            %% R419
  CharSelector                        %% R420
  LengthSelector                      %% R421
  CharLength                          %% R422
  CharLiteralConstant                 %% R423
  LogicalLiteralConstant              %% R424

%% 4.5 Derived types

  DerivedTypeDef                      %% R425
  DerivedTypeStmt                     %% R426
  TypeAttrSpec                        %% R427
  PrivateOrSequence                   %% R428
  EndTypeStmt                         %% R429
  SequenceStmt                        %% R430
  TypeParamDefStmt                    %% R431
  TypeParamDecl                       %% R432
  TypeParamAttrSpec                   %% R433
  ComponentPart                       %% R434
  ComponentDefStmt                    %% R435
  DataComponentDefStmt                %% R436
  ComponentAttrSpec                   %% R437
  ComponentDecl                       %% R438
  ComponentArraySpec                  %% R439
  ProcComponentDefStmt                %% R440
  ProcComponentAttrSpec               %% R441
  ComponentInitialization             %% R442
  InitialDataTarget                   %% R443
  PrivateComponentsStmt               %% R444
  TypeBoundProcedurePart              %% R445
  BindingPrivateStmt                  %% R446
  TypeBoundProcBinding                %% R447
  TypeBoundProcedureStmt              %% R448
  TypeBoundProcDecl                   %% R449
  TypeBoundGenericStmt                %% R450
  BindingAttr                         %% R451
  FinalProcedureStmt                  %% R452
  DerivedTypeSpec                     %% R453
  TypeParamSpec                       %% R454
  StructureConstructor                %% R455
  ComponentSpec                       %% R456
  ComponentDataSource                 %% R457

  BindingAttrList ComponentAttrSpecList ComponentDeclList
  ProcComponentAttrSpecList TypeAttrSpecList TypeBoundProcDeclList
  TypeParamDeclList TypeParamSpecList

%% 4.6 Enumerations and enumerators

  EnumDef                             %% R458
  EnumDefStmt                         %% R459
  EnumeratorDefStmt                   %% R460
  Enumerator                          %% R461
  EndEnumStmt                         %% R462

  EnumeratorList

%% 4.7 Binary, octal, and hexadecimal literal constants

  BozLiteralConstant                  %% R463
                                      %% R464  BinaryConstant - lex
                                      %% R465  OctalConstant  - lex
                                      %% R466  HexConstant    - lex
                                      %% R467  HexDigit       - lex

%% 4.8 Construction of array values

  ArrayConstructor                    %% R468
  AcSpec                              %% R469
                                      %% R470  Lbracket - lex
                                      %% R471  Lbracket - lex
  AcValue                             %% R472
  AcImpliedDo                         %% R473
  AcImpliedDoControl                  %% R474
  AcDoVariable                        %% R475

  AcValueList BindingNameList FinalSubroutineNameList TypeParamNameList

context-free syntax

%%TODO-F08 - move to clause 300

%%R305
%%TODO-DELETE   NamedConstantUse                      -> Constant
%%TODO-DELETE   UnsignedArithmeticConstant            -> Constant
%%TODO-DELETE   '+' UnsignedArithmeticConstant        -> Constant
%%TODO-DELETE   '-' UnsignedArithmeticConstant        -> Constant
%%TODO-DELETE   Scon                                  -> Constant
%%TODO-DELETE   Hcon                                  -> Constant
%%TODO-DELETE   LogicalConstant                       -> Constant
%%TODO-DELETE   Icon '_' Scon                         -> Constant
%%TODO-DELETE   NamedConstantUse '_' Scon             -> Constant


%% 3.2 Low-level syntax
%%

%%R304
  LiteralConstant                       -> Constant         {cons("Constant_AMB")}
  NamedConstant                         -> Constant         {reject} %% can't tell name is constant

%%R305
  IntLiteralConstant                    -> LiteralConstant  {cons("LiteralConstant")}
  RealLiteralConstant                   -> LiteralConstant  {cons("LiteralConstant")}
  ComplexLiteralConstant                -> LiteralConstant  {cons("LiteralConstant")}
  LogicalLiteralConstant                -> LiteralConstant  {cons("LiteralConstant")}
  CharLiteralConstant                   -> LiteralConstant  {cons("LiteralConstant")}
  BozLiteralConstant                    -> LiteralConstant  {cons("LiteralConstant")}

%%R306
  Name                                  -> NamedConstant    {cons("NamedConstant")}

%%TODO-AMBIGUOUS
%%TODO-F08 the following rules look way ambiguous

%%R307
  Constant                              -> IntConstant      {cons("IntConstant")}

%%R308
  Constant                              -> CharConstant     {cons("CharConstant")}


%% 4.2 Type parameters
%%

%%R401
%%       expr substituted for scalar-int-expr
%%
  Expr                                  -> TypeParamValue       {cons("TypeParamValue_Expr")}
  '*'                                   -> TypeParamValue       {cons("TypeParamValue_STAR")}
  ':'                                   -> TypeParamValue       {cons("TypeParamValue_COLON")}


%% 4.3 Relationship of types and values to objects
%%

%%R402
  IntrinsicTypeSpec                       -> TypeSpec             {cons("TypeSpec")}
  DerivedTypeSpec                         -> TypeSpec             {cons("TypeSpec")}

%%R403
  IntrinsicTypeSpec                       -> DeclarationTypeSpec  {cons("DeclarationTypeSpec")}
  'TYPE'  '(' IntrinsicTypeSpec ')'       -> DeclarationTypeSpec  {cons("DeclarationTypeSpec_TYPE")}
  'TYPE'  '(' DerivedTypeSpec   ')'       -> DeclarationTypeSpec  {cons("DeclarationTypeSpec_TYPE")}
  'CLASS' '(' DerivedTypeSpec   ')'       -> DeclarationTypeSpec  {cons("DeclarationTypeSpec_CLASS")}
  'CLASS' '(' '*'               ')'       -> DeclarationTypeSpec  {cons("DeclarationTypeSpec_CLASS")}
%%TR29113
  'TYPE'  '(' '*'               ')'       -> DeclarationTypeSpec  {cons("DeclarationTypeSpec_TYPE")}


%% 4.4 Intrinsic types
%%

%%R404
  'INTEGER'   KindSelector?             -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_INTEGER")}
  'REAL'      KindSelector?             -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_REAL")}
  'DOUBLE' 'PRECISION'                  -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_DOUBLE_PRECISION")}
  'COMPLEX'   KindSelector?             -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_COMPLEX")}
  'CHARACTER' CharSelector?             -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_CHARACTER")}
  'LOGICAL'   KindSelector?             -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_LOGICAL")}
  'DOUBLE' 'COMPLEX'                    -> IntrinsicTypeSpec    {cons("IntrinsicTypeSpec_DOUBLE_COMPLEX")}

%%R405
%%       expr substituted for scalar-int-constant-expr
%%       NONSTANDARD: e.g., integer*8 complex*8 complex*16
%%
  '(' 'KIND' '=' Expr ')'               -> KindSelector  {cons("KindSelector_KIND")}
  '('            Expr ')'               -> KindSelector  {cons("KindSelector_KIND")}
  '*' Icon                              -> KindSelector  {cons("KindSelector_STAR")}

%%406
  Sign? IntLiteralConstant              -> SignedIntLiteralConstant  {cons("SignedIntLiteralConstant")}

%%R407
  DigitString ('_' KindParam)?          -> IntLiteralConstant  {cons("IntLiteralConstant")}

%%R408
  DigitString                           -> KindParam          {cons("KindParam")}
  ScalarIntConstantName                 -> KindParam          {cons("KindParam")}

%%R409
  Sign? DigitString                     -> SignedDigitString  {cons("SignedDigitString")}

%%R410
  Icon                                  -> DigitString        {cons("DigitString")}

%%R411
  '+'                                   -> Sign               {cons("Sign_PLUS")}
  '-'                                   -> Sign               {cons("Sign_MINUS")}

%%R412
  Sign? RealLiteralConstant             -> SignedRealLiteralConstant  {cons("SignedRealLiteralConstant")}

%%R413
  Rcon ('_' KindParam)?                 -> RealLiteralConstant        {cons("RealLiteralConstant")}

%%R414 significand     - lex

%%R415 exponent-letter - lex

%%R416 exponent        - lex

%%R417
  '(' RealPart ',' ImagPart ')'         -> ComplexLiteralConstant  {cons("ComplexLiteralConstant")}

%%418
  SignedIntLiteralConstant              -> RealPart                {cons("RealPart")}
  SignedRealLiteralConstant             -> RealPart                {cons("RealPart")}
  NamedConstant                         -> RealPart                {cons("RealPart")}

%%419
  SignedIntLiteralConstant              -> ImagPart                {cons("ImagPart")}
  SignedRealLiteralConstant             -> ImagPart                {cons("ImagPart")}
  NamedConstant                         -> ImagPart                {cons("ImagPart")}

%%R420
%%       expr substituted for scalar-int-constant-expr
%%
  LengthSelector                                               -> CharSelector    {cons("CharSelector_LS")}
  '(' 'LEN'  '=' TypeParamValue ',' 'KIND'  '=' Expr ')'       -> CharSelector    {cons("CharSelector_LEN_KIND")}
  '('            TypeParamValue ',' 'KIND'  '=' Expr ')'       -> CharSelector    {cons("CharSelector_LEN_KIND")}
  '('            TypeParamValue ','             Expr ')'       -> CharSelector    {cons("CharSelector_LEN_KIND")}
  '(' 'KIND' '=' Expr ',' 'LEN' '=' TypeParamValue   ')'       -> CharSelector    {cons("CharSelector_KIND_LEN")}
  '(' 'KIND' '=' Expr                                ')'       -> CharSelector    {cons("CharSelector_KIND")}

%%R421
  '(' 'LEN' '=' TypeParamValue ')'                             -> LengthSelector  {cons("LengthSelector_LEN")}
  '('           TypeParamValue ')'                             -> LengthSelector  {cons("LengthSelector_LEN")}
  '*' CharLength ','                                           -> LengthSelector  {cons("LengthSelector_STAR")}
  '*' CharLength                                               -> LengthSelector  {cons("LengthSelector_STAR")}

%%R422
  '(' TypeParamValue ')'                                       -> CharLength      {cons("CharLength")}
  Icon                                                         -> CharLength      {cons("CharLength")}

%%R423
  (KindParam '_')? Scon                 -> CharLiteralConstant     {cons("CharLiteralConstant")}

%%R424
  '.TRUE.'  ('_' KindParam)?            -> LogicalLiteralConstant  {cons("LogicalLiteralConstant_TRUE")}
  '.FALSE.' ('_' KindParam)?            -> LogicalLiteralConstant  {cons("LogicalLiteralConstant_FALSE")}


%% 4.5 Derived types
%%

%%R425
  DerivedTypeStmt
    TypeParamDefStmt*
    PrivateOrSequence*
    ComponentPart?
    TypeBoundProcedurePart?
  EndTypeStmt                           -> DerivedTypeDef          {cons("DerivedTypeDef")}

%%R426
  Label? 'TYPE'
             ( (',' TypeAttrSpecList)? '::' )? TypeName
             ( '('  TypeParamNameList ')'   )?             EOS -> DerivedTypeStmt  {cons("DerivedTypeStmt")}
  {TypeParamName ','}+                                         -> TypeParamNameList{cons("TypeParamNameList")}

  'INTEGER'                                                    -> TypeName  {reject}
  'REAL'                                                       -> TypeName  {reject}
  'DOUBLEPRECISION'                                            -> TypeName  {reject}
  'COMPLEX'                                                    -> TypeName  {reject}
  'CHARACTER'                                                  -> TypeName  {reject}
  'LOGICAL'                                                    -> TypeName  {reject}
  'DOUBLECOMPLEX'                                              -> TypeName  {reject}

%%R427
  'ABSTRACT'                                                   -> TypeAttrSpec     {cons("TypeAttrSpec_ABSTRACT")}
   AccessSpec                                                  -> TypeAttrSpec     {cons("TypeAttrSpec_AS")}
  'BIND'     '(' 'C'            ')'                            -> TypeAttrSpec     {cons("TypeAttrSpec_BIND")}
  'EXTENDS'  '(' ParentTypeName ')'                            -> TypeAttrSpec     {cons("TypeAttrSpec_EXTENDS")}
  {TypeAttrSpec ','}+                                          -> TypeAttrSpecList {cons("TypeAttrSpecList")}

%%R428
  PrivateComponentsStmt                                        -> PrivateOrSequence  {cons("PrivateOrSequence")}
  SequenceStmt                                                 -> PrivateOrSequence  {cons("PrivateOrSequence")}

%%R429
  Label? 'END' 'TYPE' TypeName?                            EOS -> EndTypeStmt      {cons("EndTypeStmt")}

%%R430
  Label? 'SEQUENCE'                                        EOS -> SequenceStmt     {cons("SequenceStmt")}

%%R431
  Label? 'INTEGER' KindSelector? ','   TypeParamAttrSpec
                                 '::'  TypeParamDeclList   EOS -> TypeParamDefStmt {cons("TypeParamDefStmt")}

%%R432
%%        expr substituted for scalar-int-constant-expr
%%
  TypeParamName ( '=' Expr )?                                  -> TypeParamDecl    {cons("TypeParamDecl")}
  {TypeParamDecl ','}+                                         -> TypeParamDeclList{cons("TypeParamDeclList")}

%%R433
  'KIND'                                -> TypeParamAttrSpec  {cons("TypeParamAttrSpec_KIND")}
  'LEN'                                 -> TypeParamAttrSpec  {cons("TypeParamAttrSpec_LEN")}

%%R434
  ComponentDefStmt*                     -> ComponentPart      {cons("ComponentPart")}

%%R435
  DataComponentDefStmt                  -> ComponentDefStmt   {cons("ComponentDefStmt")}
  ProcComponentDefStmt                  -> ComponentDefStmt   {cons("ComponentDefStmt")}

%%R436
  Label? DeclarationTypeSpec
           ( (',' ComponentAttrSpecList )? '::' )?
                  ComponentDeclList    EOS  -> DataComponentDefStmt  {cons("DataComponentDefStmt")}

%%R437
  AccessSpec                                -> ComponentAttrSpec     {cons("ComponentAttrSpec_AS")}
  'ALLOCATABLE'                             -> ComponentAttrSpec     {cons("ComponentAttrSpec_ALLOCATABLE")}
  'CODIMENSION' '[' CoarraySpec ']'         -> ComponentAttrSpec     {cons("ComponentAttrSpec_CODIMENSION")}
  'CONTIGUOUS'                              -> ComponentAttrSpec     {cons("ComponentAttrSpec_CONTIGUOUS")}
  'DIMENSION' '(' ComponentArraySpec ')'    -> ComponentAttrSpec     {cons("ComponentAttrSpec_DIMENSION")}
  'POINTER'                                 -> ComponentAttrSpec     {cons("ComponentAttrSpec_POINTER")}
  {ComponentAttrSpec ','}+                  -> ComponentAttrSpecList {cons("ComponentAttrSpecList")}

%%R438
  ComponentName ( '(' ComponentArraySpec ')' )?
                ( '[' CoarraySpec        ']' )?
                ( '*' CharLength )? ComponentInitialization?  -> ComponentDecl     {cons("ComponentDecl")}
  {ComponentDecl ','}+                                        -> ComponentDeclList {cons("ComponentDeclList")}

%%R439
  ExplicitShapeSpecList                       -> ComponentArraySpec        {cons("ComponentArraySpec")}
  DeferredShapeSpecList                       -> ComponentArraySpec        {cons("ComponentArraySpec")}

%%R440
  Label? 'PROCEDURE'
           '('  ProcInterface? ')' ','
                ProcComponentAttrSpecList
           '::' ProcDeclList             EOS  -> ProcComponentDefStmt      {cons("ProcComponentDefStmt")}

%%R441
  'POINTER'                                   -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_POINTER")}
  'PASS'                                      -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_PASS")}
  'NOPASS'                                    -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_NOPASS")}
  AccessSpec                                  -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_AS")}
  {ProcComponentAttrSpec ','}+                -> ProcComponentAttrSpecList {cons("ProcComponentAttrSpecList")}

%%R442
  '=' Expr                                    -> ComponentInitialization   {cons("ComponentInitialization")}
  '=>' NullInit                               -> ComponentInitialization   {cons("ComponentInitialization")}
  '=>' InitialDataTarget                      -> ComponentInitialization   {cons("ComponentInitialization")}

%%R443
%%ABIGUITY Replace designator by variable?
  Designator                                       -> InitialDataTarget      {cons("InitialDataTarget")}

%%R444
  Label? 'PRIVATE'                             EOS -> PrivateComponentsStmt  {cons("PrivateComponentsStmt")}

%%R445
  ContainsStmt
    BindingPrivateStmt?
    TypeBoundProcBinding*                          -> TypeBoundProcedurePart {cons("TypeBoundProcedurePart")}

%%R446
  Label? 'PRIVATE'                             EOS -> BindingPrivateStmt     {cons("BindingPrivateStmt")}

%%R447
  TypeBoundProcedureStmt                           -> TypeBoundProcBinding   {cons("TypeBoundProcBinding")}
  TypeBoundGenericStmt                             -> TypeBoundProcBinding   {cons("TypeBoundProcBinding")}
  FinalProcedureStmt                               -> TypeBoundProcBinding   {cons("TypeBoundProcBinding")}

%%R448
  Label? 'PROCEDURE'
              (( ',' BindingAttrList )? '::')?
                     TypeBoundProcDeclList
                                               EOS -> TypeBoundProcedureStmt  {cons("TypeBoundProcedureStmt")}
  Label? 'PROCEDURE'
              '(' InterfaceName ')'
                 ',' BindingAttrList    '::'
                     BindingNameList
                                               EOS -> TypeBoundProcedureStmt  {cons("TypeBoundProcedureStmt")}

  {BindingAttr ','}+                               -> BindingAttrList         {cons("BindingAttrList")}
  {BindingName ','}+                               -> BindingNameList         {cons("BindingNameList")}

%%R449
  BindingName ( '=>' ProcedureName )?              -> TypeBoundProcDecl       {cons("TypeBoundProcDecl")}
  {TypeBoundProcDecl ','}+                         -> TypeBoundProcDeclList   {cons("TypeBoundProcDeclList")}

%%R450
  Label? 'GENERIC' ( ',' AccessSpec )?
     '::' GenericSpec '=>' BindingNameList     EOS -> TypeBoundGenericStmt    {cons("TypeBoundGenericStmt")}

%%451
  'PASS' ('(' ArgName ')')?                        -> BindingAttr             {cons("BindingAttr_PASS")}
  'NOPASS'                                         -> BindingAttr             {cons("BindingAttr_NOPASS")}
  'NON_OVERRIDABLE'                                -> BindingAttr             {cons("BindingAttr_NON_OVERRIDABLE")}
  'DEFERRED'                                       -> BindingAttr             {cons("BindingAttr_DEFERRED")}
  AccessSpec                                       -> BindingAttr             {cons("BindingAttr_AS")}

%%452
  Label? 'FINAL' '::'? FinalSubroutineNameList EOS -> FinalProcedureStmt      {cons("FinalProcedureStmt")}
  {FinalSubroutineName ','}+                       -> FinalSubroutineNameList {cons("FinalSubroutineNameList")}

%%R453
  TypeName ( '(' TypeParamSpecList ')' )?          -> DerivedTypeSpec         {cons("DerivedTypeSpec")}

%%R454
  ( Keyword '=' )? TypeParamValue                  -> TypeParamSpec           {cons("TypeParamSpec")}
 {TypeParamSpec ','}+                              -> TypeParamSpecList       {cons("TypeParamSpecList")}

%%R455
  DerivedTypeSpec '(' {ComponentSpec ','}* ')'     -> StructureConstructor    {cons("StructureConstructor")}

%%R456
  ( Keyword '=' )? ComponentDataSource             -> ComponentSpec           {cons("ComponentSpec")}

%%R457
  Expr                                             -> ComponentDataSource     {cons("ComponentDataSource")}  
  DataTarget                                       -> ComponentDataSource     {cons("ComponentDataSource")}  
  ProcTarget                                       -> ComponentDataSource     {cons("ComponentDataSource")}  


%% 4.6 Enumerations and enumerators
%%

%%R458
  EnumDefStmt
    EnumeratorDefStmt+
  EndEnumStmt                                      -> EnumDef                 {cons("EnumDef")}

%%R459
  Label? 'ENUM' ',' 'BIND' '(' 'C' ')'         EOS -> EnumDefStmt             {cons("EnumDefStmt")}

%%R460
  Label? 'ENUMERATOR' '::'? EnumeratorList     EOS -> EnumeratorDefStmt       {cons("EnumeratorDefStmt")}

%%R461
%%       IntConstantExpr substituted for ScalarIntConstantExpr
%%
  NamedConstant ('=' IntConstantExpr)?             -> Enumerator              {cons("Enumerator")}
  {Enumerator ','}+                                -> EnumeratorList          {cons("EnumeratorList")}

%%R462
  Label? 'END' 'ENUM'                          EOS -> EndEnumStmt             {cons("EndEnumStmt")}


%% 4.7 Binary, octal, and hexadecimal literal constants
%%

%%R463
  BinaryConstant                                   -> BozLiteralConstant      {cons("BozLiteralConstant")}
  OctalConstant                                    -> BozLiteralConstant      {cons("BozLiteralConstant")}
  HexConstant                                      -> BozLiteralConstant      {cons("BozLiteralConstant")}

%%R464
%% BinaryConstant - lex

%%R465
%% OctalConstant - lex

%%R466
%% HexConstant - lex

%%R467
%% HexDigit - ex


%% 4.8 Construction of array values
%%

%%R468
  '(/' AcSpec '/)'                                 -> ArrayConstructor     {cons("ArrayConstructor")}
  '['  AcSpec  ']'                                 -> ArrayConstructor     {cons("ArrayConstructor")}

%%R469
   TypeSpec '::'                                   -> AcSpec               {cons("AcSpec")}
  (TypeSpec '::')? AcValueList                     -> AcSpec               {cons("AcSpec")}
  {AcValue ','}+                                   -> AcValueList          {cons("AcValueList")}

%%R470
%% Lbracket - lex

%%R471
%% Rbracket - lex

%%R472
  Expr                                             -> AcValue              {cons("AcValue")}
  AcImpliedDo                                      -> AcValue              {cons("AcValue")}
   
%%R473
  '(' AcValueList ',' AcImpliedDoControl ')'       -> AcImpliedDo          {cons("AcImpliedDo")}

%%R474
%%      expr substituted for scalar-int-expr
%%
  AcDoVariable '=' Expr ',' Expr (',' Expr)?       -> AcImpliedDoControl   {cons("AcImpliedDoControl")}

%%R475
  DoVariable                                       -> AcDoVariable         {cons("AcDoVariable")}

%%R432
%%TODO-REMOVE
%%  Expr                                        -> AcValueList
%%  AcValueList1                                -> AcValueList
%%  Expr ',' Expr                               -> AcValueList1
%%  Expr ',' AcImpliedDo                        -> AcValueList1
%%  AcImpliedDo                                 -> AcValueList1
%%  AcValueList1 ',' Expr                       -> AcValueList1
%%  AcValueList1 ',' AcImpliedDo                -> AcValueList1

%%R433
%%TODO-REMOVE
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')'                  -> AcImpliedDo
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')'         -> AcImpliedDo
%%TODO   '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ')'           -> AcImpliedDo
%%TODO   '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')'  -> AcImpliedDo
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')'                  -> AcImpliedDo
