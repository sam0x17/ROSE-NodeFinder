      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R8xx Execution Control
%%%%%%%%%%

%%module languages/fortran/syntax/R800ExecutionControl
module R800ExecutionControl

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/Fortran90
  FortranLex
  R1100ProgramUnits

exports

sorts

%% 8.1 Executable constructs containing blocks

  Block                               %% R801
  AssociateConstruct                  %% R802
  AssociateStmt                       %% R803
  Association                         %% R804
  Selector                            %% R805
  EndAssociateStmt                    %% R806
  BlockConstruct                      %% R807
  BlockStmt                           %% R808
  EndBlockStmt                        %% R809
  CriticalConstruct                   %% R810
  CriticalStmt                        %% R811
  EndCriticalStmt                     %% R812
                                      %% R813  DoConstruct      - ambiguous removed
                                      %% R814  BlockDoConstruct - ambiguous removed
                                      %% R815  DoStmt           - ambiguous removed
  LabelDoStmt                         %% R816
  NonlabelDoStmt                      %% R817
  LoopControl                         %% R818
  DoVariable                          %% R819
                                      %% R820  DoBlock             - ambiguous removed
                                      %% R821  EndDo               - ambiguous removed
  EndDoStmt                           %% R822
                                      %% R823  NonblockDoConstruct - ambiguous removed
                                      %% R824  ActionTermDoConstruct - ambiguous removed
                                      %% R825  DoBody                - ambiguous removed
                                      %% R826  DoTermActionStmt      - ambiguous removed
                                      %% R827  OuterSharedDoConstruct - ambiguous removed
                                      %% R828  SharedTermDoConstruct  - ambiguous removed
                                      %% R829  InnerSharedDoConstruct - ambiguous removed
                                      %% R830  DoTermSharedStmt       - ambiguous removed
  CycleStmt                           %% R831
  IfConstruct                         %% R832
  IfThenStmt                          %% R833
  ElseIfStmt                          %% R834
  ElseStmt                            %% R835
  EndIfStmt                           %% R836
  IfStmt                              %% R837
  CaseConstruct                       %% R838
  SelectCaseStmt                      %% R839
  CaseStmt                            %% R840
  EndSelectStmt                       %% R841
  CaseExpr                            %% R842
  CaseSelector                        %% R843
  CaseValueRange                      %% R844
  CaseValue                           %% R845
  SelectTypeConstruct                 %% R846
  SelectTypeStmt                      %% R847
  TypeGuardStmt                       %% R848
  EndSelectTypeStmt                   %% R849
  ExitStmt                            %% R850

  AssociationList CaseValueRangeList

%% 8.2 Branching

  GotoStmt                            %% R851
  ComputedGotoStmt                    %% R852
  ArithmeticIfStmt                    %% R853

%% 8.3 Continue statement

  ContinueStmt                        %% R854

%% 8.4 Stop and Error Stop statements

  StopStmt                            %% R855
  ErrorStopStmt                       %% R856
  StopCode                            %% R857

%% 8.5 Image execution control

  SyncAllStmt                         %% R858
  SyncStat                            %% R859
  SyncImagesStmt                      %% R860
  ImageSet                            %% R861
  SyncMemoryStmt                      %% R862
  LockStmt                            %% R863
  LockStat                            %% R864
  UnlockStmt                          %% R865
  LockVariable                        %% R866

  LabelList LockStatList SyncStatList

context-free syntax


%% 8.1 Executable constructs containing blocks
%%

%%R801
  ExecutionPartConstruct*                               -> Block              {cons("Block")}

%%R802
  AssociateStmt
    Block
  EndAssociateStmt                                      -> AssociateConstruct {cons("AssociateConstruct")}

%%R803
  Label? (AssociateConstructName ':')?
     'ASSOCIATE' '(' AssociationList ')'            EOS -> AssociateStmt      {cons("AssociateStmt")}

%%R804
  AssociateName '=>' Selector                           -> Association        {cons("Association")}
  {Association ','}+                                    -> AssociationList    {cons("AssociationList")}

%%R805
%%TODO-F08 is this ambiguous?
  Expr                                                  -> Selector           {cons("Selector_Expr")}
  Variable                                              -> Selector           {cons("Selector_Var")}

%%R806
  Label? 'END' 'ASSOCIATE' AssociateConstructName?  EOS -> EndAssociateStmt   {cons("EndAssociateStmt")}

%%R807
%%       The optional specification-part is ambiguous.  The lack of a specification-part
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  BlockStmt
    SpecificationPart
    Block
  EndBlockStmt                                          -> BlockConstruct     {cons("BlockConstruct")}

%%R808
  Label? ( BlockConstructName ':' )? 'BLOCK'        EOS -> BlockStmt          {cons("BlockStmt")}

%%R809
  Label? 'END' 'BLOCK' BlockConstructName?          EOS -> EndBlockStmt       {cons("EndBlockStmt")}

%%R810
  CriticalStmt
    Block
  EndCriticalStmt                                       -> CriticalConstruct  {cons("CriticalConstruct")}

%%R811
  Label? ( CriticalConstructName ':' )? 'CRITICAL'  EOS -> CriticalStmt       {cons("CriticalStmt")}

%%R812
  Label? 'END' 'CRITICAL' CriticalConstructName?    EOS -> EndCriticalStmt    {cons("EndCriticalStmt")}


%% Block DO constructs cannot be recognized syntactically because there is
%% no requirement that there is an end do statement.  Specifically, a
%% nonblock-do-construct may terminate on an action-stmt.  Therefore
%% a do-construct will have to be recognized by a rewrite phase that
%% searches for the terminating statement.  So the parser grammar needs to
%% place any new statements that are part of a do-construct into the
%% the action-stmt set.
%%

%%R813
%%AMB BlockDoConstruct                                  -> DoConstruct
%%AMB NonblockDoConstruct                               -> DoConstruct

%%R814
%%AMB DoStmt
%%AMB   DoBlock
%%AMB EndDo                                             -> BlockDoConstruct

%%R815
%%AMB LabelDoStmt                                       -> DoStmt
%%AMB NonlableDoStmt                                    -> DoStmt

%%R816
  Label? (DoConstructName ':')?
         'DO' LblRef LoopControl?                   EOS -> LabelDoStmt    {cons("LabelDoStmt")}

%%R817
  Label? (DoConstructName ':')?
         'DO'        LoopControl?                   EOS -> NonlabelDoStmt {cons("NonlabelDoStmt")}

%%R818
%%        expr substituted for scalar-int-expr
%%        expr substituted for scalar-logical-expr
%%
  ','? DoVariable '=' Expr ',' Expr (',' Expr)?         -> LoopControl    {cons("LoopControl_DV")}
  ','? 'WHILE' '(' Expr ')'                             -> LoopControl    {cons("LoopControl_WHILE")}
  ','? 'CONCURRENT' ForallHeader                        -> LoopControl    {cons("LoopControl_CONCURRENT")}

%%R819
  ScalarIntVariableName                                 -> DoVariable     {cons("DoVariable")}

%%820
%%AMB  Block                                            -> DoBlock

%%821
%%AMB EndDoStmt                                         -> EndDo
%%AMB ContinueStmt                                      -> EndDo

%%R822
  Label? 'END' 'DO' DoConstructName?                EOS -> EndDoStmt      {cons("EndDoStmt")}

%%R823
%%AMB ActionTermDoConstruct                             -> NonblockDoConstruct
%%AMB OuterSharedDoConstruct                            -> NonblockDoConstruct

%%R824
%%AMB LabelDoStmt
%%AMB   DoBody
%%AMB DoTermActionStmt                                  -> ActionTermDoConstruct

%%R825
%%AMB ExecutionPartConstruct*                           -> DoBody

%%R826
%%AMB ActionStmt                                        -> DoTermActionStmt

%%R827
%%AMB LabelDoStmt
%%AMB   DoBody
%%AMB SharedTermDoConstruct                             -> OuterSharedDoConstruct

%%R828
%%AMB OuterSharedDoConstruct                            -> SharedTermDoConstruct
%%AMB InnerSharedDoConstruct                            -> SharedTermDoConstruct

%%R829
%%AMB LabelDoStmt
%%AMB   DoBody
%%AMB SharedTermDoConstruct                             -> InnerSharedDoConstruct

%%R830
%%AMB ActionStmt                                        -> DoTermSharedStmt

%%R831
  Label? 'CYCLE' DoConstructName?                   EOS -> CycleStmt      {cons("CycleStmt")}

%%R832
   IfThenStmt Block
  (ElseIfStmt Block)* 
  (ElseStmt   Block)? 
   EndIfStmt                                            -> IfConstruct    {cons("IfConstruct")}

%%R833
%%       logical-expr substituted for scalar-logical-expr
%%
  Label? (IfConstructName ':')?
         'IF' '(' LogicalExpr ')' 'THEN'            EOS -> IfThenStmt     {cons("IfThenStmt")}

%%R834
%%       logical-expr substituted for scalar-logical-expr
%%
  Label? 'ELSE' 'IF' '(' LogicalExpr ')'
         'THEN' IfConstructName?                    EOS -> ElseIfStmt     {cons("ElseIfStmt")}

%%R835
  Label? 'ELSE' IfConstructName?                    EOS -> ElseStmt       {cons("ElseStmt")}

%%R836
  Label? 'END' 'IF' IfConstructName?                EOS -> EndIfStmt      {cons("EndIfStmt")}

%%R837
%%       logical-expr substituted for scalar-logical-expr
%%
  Label? 'IF' '(' LogicalExpr ')' ActionStmt            -> IfStmt         {cons("IfStmt")}

%%R838
  SelectCaseStmt
    ( CaseStmt Block )*
  EndSelectStmt                                         -> CaseConstruct  {cons("CaseConstruct")}

%%R839
  Label? ( CaseConstructName ':' )?
     'SELECT' 'CASE' '(' CaseExpr ')'               EOS -> SelectCaseStmt {cons("SelectCaseStmt")}

%%R840
  Label? 'CASE' CaseSelector CaseConstructName?     EOS -> CaseStmt       {cons("CaseStmt")}

%%R841
  Label? 'END' 'SELECT' CaseConstructName?          EOS -> EndSelectStmt  {cons("EndSelectStmt")}

%%R842
%%       expr substituted for scalar-expr
%%
  Expr                                                  -> CaseExpr       {cons("CaseExpr")}

%%R843
  '(' CaseValueRangeList ')'                            -> CaseSelector   {cons("CaseSelector_CVRL")}
  'DEFAULT'                                             -> CaseSelector   {cons("CaseSelector_DEFAULT")}

%%R844
      CaseValue                                         -> CaseValueRange     {cons("CaseValueRange")}
      CaseValue ':'                                     -> CaseValueRange     {cons("CaseValueRange")}
  ':' CaseValue                                         -> CaseValueRange     {cons("CaseValueRange")}
      CaseValue ':' CaseValue                           -> CaseValueRange     {cons("CaseValueRange")}
  {CaseValueRange ','}+                                 -> CaseValueRangeList {cons("CaseValueRangeList")}

%%R845
%%       constant-expr substituted for scalar-constant-expr
%%
  ConstantExpr                                          -> CaseValue      {cons("CaseValue")}

%%R846
  SelectTypeStmt
    (TypeGuardStmt Block)*
  EndSelectTypeStmt                                     -> SelectTypeConstruct  {cons("SelectTypeConstruct")}

%%R847
  ( SelectConstructName ':')?
  'SELECT' 'TYPE'
           '(' (AssociateName '=>')? Selector ')'   EOS -> SelectTypeStmt       {cons("SelectTypeStmt")}

%%848
  'TYPE'  'IS' '(' TypeSpec        ')' SelectConstructName? EOS -> TypeGuardStmt {cons("TypeGuardStmt_TYPE")}
  'CLASS' 'IS' '(' DerivedTypeSpec ')' SelectConstructName? EOS -> TypeGuardStmt {cons("TypeGuardStmt_CLASS")}
  'CLASS' 'DEFAULT'                    SelectConstructName? EOS -> TypeGuardStmt {cons("TypeGuardStmt_CLASS_DEFAULT")}

%%R849
  'END' 'SELECT' SelectConstructName?               EOS -> EndSelectTypeStmt    {cons("EndSelectTypeStmt")}

%%R850
  Label? 'EXIT' ConstructName?                      EOS -> ExitStmt             {cons("ExitStmt")}


%% 8.2 Branching
%%

%%R851
  Label? 'GO' 'TO' LblRef                           EOS -> GotoStmt             {cons("GotoStmt")}

%%R852
%%       expr substituted for scalar-int-expr
%%
  Label? 'GO' 'TO' '(' LabelList ')' ','? Expr      EOS -> ComputedGotoStmt {cons("ComputedGotoStmt")}

  {LblRef ','}+                                         -> LabelList        {cons("LabelList")}

%%R853
%%       expr substituted for scalar-numeric-expr
%%
  Label? 'IF' '(' Expr ')' LblRef ',' LblRef ',' LblRef EOS -> ArithmeticIfStmt {cons("ArithmeticIfStmt")}


%% 8.3 Continue statement
%%

%%R854
  Label? 'CONTINUE'                                 EOS -> ContinueStmt         {cons("ContinueStmt")}


%% 8.4 Stop and Error Stop statements
%%

%%R855
  Label?         'STOP' StopCode?                   EOS -> StopStmt             {cons("StopStmt")}

%%R856
  Label? 'ERROR' 'STOP' StopCode?                   EOS -> ErrorStopStmt        {cons("ErrorStopStmt")}

%%R857
%%        Scon substituted for scalar-default-char-constant-expr
%%        Icon substituted for scalar-int-constant-expr
%%
  Scon                                                  -> StopCode             {cons("StopCode_SDCCE")}
  Icon                                                  -> StopCode             {cons("StopCode_SICE")}


%% 8.5 Image execution control
%%

%%R858
  Label? 'SYNC' 'ALL'
         ( '(' SyncStatList? ')' )?                 EOS -> SyncAllStmt          {cons("SyncAllStmt")}

%%R859
  'STAT'   '=' StatVariable                             -> SyncStat             {cons("SyncStat_STAT")}
  'ERRMSG' '=' ErrmsgVariable                           -> SyncStat             {cons("SyncStat_ERRMSG")}
  {SyncStat ','}+                                       -> SyncStatList         {cons("SyncStatList")}

%%R860
  Label? 'SYNC' 'IMAGES' '(' ImageSet
                (',' SyncStatList )? ')'            EOS -> SyncImagesStmt       {cons("SyncImagesStmt")}

%%R861
  IntExpr                                               -> ImageSet             {cons("ImageSet_IE")}
  '*'                                                   -> ImageSet             {cons("ImageSet_STAR")}

%%R862
  Label? 'SYNC' 'MEMORY'
         ( '(' SyncStatList? ')' )?                 EOS -> SyncMemoryStmt       {cons("SyncMemoryStmt")}

%%R863
  Label? 'LOCK' '(' LockVariable
                 (',' LockStatList )? ')'           EOS -> LockStmt             {cons("LockStmt")}

%%R864
  'ACQUIRED_LOCK' '=' LogicalVariable                   -> LockStat             {cons("LockStat_ACQUIRED_LOCK")}
  SyncStat                                              -> LockStat             {cons("LockStat_SS")}
  {LockStat ','}+                                       -> LockStatList         {cons("LockStatList")}

%%R865
  Label? 'UNLOCK' '(' LockVariable
                   (',' SyncStatList )? ')'         EOS -> UnlockStmt           {cons("UnlockStmt")}

%%866
%%          variable substituted for scalar-variable
%%
  Variable                                              -> LockVariable         {cons("LockVariable")}
