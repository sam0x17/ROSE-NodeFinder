//////////////////////////////////////////////////////////////////////
// PURE EVAL CONSTINT
//////////////////////////////////////////////////////////////////////
AValue ExprAnalyzer::pureEvalConstInt(SgNode* node,EState& estate) {
  ConstraintSet cset=*estate.constraints();
  AValue res;
  // initialize with default values from argument(s)
  res=AType::ConstIntLattice(AType::Bot());

  if(dynamic_cast<SgBinaryOp*>(node)) {
    SgNode* lhs=SgNodeHelper::getLhs(node);
    AValue lhsResult=pureEvalConstInt(lhs,estate);
    SgNode* rhs=SgNodeHelper::getRhs(node);
    AValue rhsResult=pureEvalConstInt(rhs,estate);

    switch(node->variantT()) {
    case V_SgEqualityOp: {
      res=(lhsResult==rhsResult);
      // record new constraint
      VariableId varId;
      if((variable(lhs,varId) && rhsResult.isConstInt()) || (lhsResult.isConstInt() && variable(rhs,varId))) {
        // only add the equality constraint if no constant is bound to the respective variable
        if(!estate.pstate()->varIsConst(varId)) {
          Constraint newConstraint=Constraint(Constraint::NEQ_VAR_CONST,varId,rhsResult);
          if(cset.constraintExists(newConstraint)) {
            return true; // existing constraint allows to assume this fact as true 
          }
        }
      }
      return res;
    }
    case V_SgNotEqualOp: {
      res=(lhsResult!=rhsResult);
      // record new constraint
      VariableId varId;
      if((variable(lhs,varId) && rhsResult.isConstInt()) || (lhsResult.isConstInt() && variable(rhs,varId))) {
        // only add the inequality constraint if no constant is bound to the respective variable
        if(!estate.pstate()->varIsConst(varId)) {
          Constraint newConstraint=Constraint(Constraint::NEQ_VAR_CONST,varId,rhsResult);
          if(cset.constraintExists(newConstraint)) {
            // override result of evaluation based on existent constraint
            res=true;
          } else {
            res=AType::Top();
          }
        }
      }
      return res;
    }
    case V_SgAndOp:
      // we encode short-circuit CPP-AND semantics here!
      if(lhsResult.isFalse()) {
        res=lhsResult;
      } else {
        res=(lhsResult&&rhsResult);
      }
      return res;
    case V_SgOrOp:
      // we encode short-circuit CPP-OR semantics here!
      if(lhsResult.isTrue()) {
        res=lhsResult;
      } else {
        res=(lhsResult||rhsResult);
      }
      return res;
    default:
      throw "Error: evalConstInt::binary operation failed.";
    }
  }
  if(dynamic_cast<SgUnaryOp*>(node)) {
    SgNode* child=SgNodeHelper::getFirstChild(node);
    AValue operandResult=pureEvalConstInt(child,estate);
    switch(node->variantT()) {
    case V_SgNotOp:
      res=!operandResult;
      return res;
    case V_SgCastExp: {
      SgCastExp* castExp=isSgCastExp(node);
      return pureEvalConstInt(SgNodeHelper::getFirstChild(castExp),estate);
    }
    case V_SgMinusOp: {
      res=-operandResult; // using overloaded operator
      return res;
    }
    default:
      cerr << "@NODE:"<<node->sage_class_name()<<endl;
      throw "Error: pureEvalConstInt::unary operation failed.";
    } // end switch
  }
  assert(!dynamic_cast<SgBinaryOp*>(node) && !dynamic_cast<SgUnaryOp*>(node));

  // ALL REMAINING CASES DO NOT GENERATE CONSTRAINTS
  switch(node->variantT()) {
  case V_SgBoolValExp: {
    SgBoolValExp* boolValExp=isSgBoolValExp(node);
    assert(boolValExp);
    int boolVal= boolValExp->get_value();
    if(boolVal==0) {
      res=false;
      return res;
    }
    if(boolVal==1) {
      res=true;
      return res;
    }
    break;
  }
  case V_SgIntVal: {
    SgIntVal* intValNode=isSgIntVal(node);
    int intVal=intValNode->get_value();
    res=intVal;
    return res;
  }
  case V_SgVarRefExp: {
    VariableId varId;
    bool isVar=ExprAnalyzer::variable(node,varId);
    assert(isVar);
    const PState* pstate=estate.pstate();
    if(pstate->varExists(varId)) {
      PState pstate2=*pstate; // also removes constness
      res=pstate2[varId].getValue();
      if(res.isTop()) {
        // in case of TOP we try to extract a possibly more precise value from the constraints
        AValue val=cset.varConstIntLatticeValue(varId);
        //if(!val.isTop())
        // TODO: we will want to monitor this for statistics!
        //  cout << "DEBUG: extracing more precise value from constraints: "<<res.toString()<<" ==> "<<val.toString()<<endl;
        res=val;
      }
      return res;
    } else {
      res=AType::Top();
      //cerr << "WARNING: variable not in State (var="<<_variableIdMapping->uniqueLongVariableName(varId)<<"). Initialized with top."<<endl;
      return res;
    }
    break;
  }
  default:
    cerr << "@NODE:"<<node->sage_class_name()<<endl;
    throw "Error: evalConstInt::unknown operation failed.";
  } // end of switch
  throw "Error: evalConstInt failed.";
}

//////////////////////////////////////////////////////////////////////
// EVAL BOOL
//////////////////////////////////////////////////////////////////////
SingleEvalResult ExprAnalyzer::eval(SgNode* node,EState estate) {
  SingleEvalResult tmp;
  tmp.estate=estate;
  switch(node->variantT()) {
  case V_SgAndOp: {
    SgNode* lhs=SgNodeHelper::getLhs(node);
    SingleEvalResult lhsResult=eval(lhs,estate);
    SgNode* rhs=SgNodeHelper::getRhs(node);
    SingleEvalResult rhsResult=eval(rhs,estate);
    tmp.result=lhsResult.result&&rhsResult.result;
    return tmp;
  }
  case V_SgOrOp: {
    SgNode* lhs=SgNodeHelper::getLhs(node);
    SingleEvalResult lhsResult=eval(lhs,estate);
    SgNode* rhs=SgNodeHelper::getRhs(node);
    SingleEvalResult rhsResult=eval(rhs,estate);
    tmp.result=lhsResult.result||rhsResult.result;
    return tmp;
  }
  case V_SgNotOp: {
    SgNode* child=SgNodeHelper::getFirstChild(node);
    SingleEvalResult operandResult=eval(child,estate);
    tmp.result=!operandResult.result;
    return tmp;
  }
  case V_SgBoolValExp: {
    SgBoolValExp* boolValExp=isSgBoolValExp(node);
    assert(boolValExp);
    int boolVal= boolValExp->get_value();
    if(boolVal==0) {
      tmp.result=false;
      return tmp;
    }
    if(boolVal==1) {
      tmp.result=true;
      return tmp;
    }
    break;
  }
  default:
    throw "ExprAnalyzer::eval: unknown operator.";
  } // end of switch
  tmp.result=AType::Top();
  return tmp;
}

