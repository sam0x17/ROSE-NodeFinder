include Cfront.code

<code Pragma pars=(content)> #pragma @content@ </code>

<code manycore_stencil_size pars=(dim,loc)>
@loc@_size@dim@
</code>

<code manycore_stencil_index pars=(sub, loc:"local"|"upper"|"lower",core:"local"|"otherCore")>
@dim=""; for (i=LEN(sub)-1; i>0; i=i-1) { dim=BuildList(manycore_stencil_size#(i-1,loc),dim);}
core@_index@LEN(sub)@D(@ExpList#(AppendList(sub,dim))@)
</code>

<code manycore_stencil_local_arr pars=(arr_name, sub)>
@arr_name@Section[@manycore_stencil_index#(sub,"local","local")@]
</code>

<code manycore_neighbor_subscript pars=(loc)>
@(switch (loc) { 
case "local": "[1][1]"
case "upper": "[0][1]"
case "lower": "[2][1]"
case "left":  "[1][0]"
case "right": "[1][2]"
case CODE.manycore_stencil_corner#("upper", "left"): "[0][0]"
case CODE.manycore_stencil_corner#("lower", "left"): "[2][0]"
case CODE.manycore_stencil_corner#("upper", "right"): "[0][2]"
case CODE.manycore_stencil_corner#("lower", "right"): "[2][2]"
})@
</code>

<code manycore_stencil_corner pars=(dim1,dim2)>
@dim1@_@dim2@
</code>


<code manycore_boundaryCore pars=(loc)>
bounaryCore@(switch (loc) { 
case "upper": "[1][0]" 
case "lower": "[1][1]" 
case "left": "[0][0]"
case "right": "[0][1]"
})@
</code>

<code manycore_stencil_remote_arr pars=(arr_name, dim, loc, sub)>
@arr_name@SectionPointers[coreArrayNeighborhoodLinearized@(manycore_neighbor_subscript#(loc))@][@manycore_stencil_index#(sub,loc,"otherCore")@]
</code>

<code manycore_stencil_size_init pars=(dim,loc) >
int @manycore_stencil_size#(dim,loc)@ = coreArrayNeighborhoodSizes@manycore_neighbor_subscript#(loc)@[@dim@];
</code>

<code initialize_dimsizes pars=(dim) >
@dim=dim-1; if (dim < 0) { "" } else { (@
@manycore_stencil_size_init#(dim,"local")@ 
@manycore_stencil_size_init#(dim,"upper")@
@manycore_stencil_size_init#(dim,"lower")@
@manycore_stencil_size_init#(dim,"left")@
@manycore_stencil_size_init#(dim,"right")@
@manycore_stencil_size_init#(dim, CODE.manycore_stencil_corner#("upper", "left"))@
@manycore_stencil_size_init#(dim, CODE.manycore_stencil_corner#("upper", "right"))@
@manycore_stencil_size_init#(dim, CODE.manycore_stencil_corner#("lower", "left"))@
@manycore_stencil_size_init#(dim, CODE.manycore_stencil_corner#("lower", "right"))@
@initialize_dimsizes#(dim)) }@
</code>

<code manycore_stencil_boundaries pars=(old_array, array, dimsizes,dim_index,st_local)>
@cur_dim=(car dimsizes); p_dim=cdr(dimsizes); 
 if (dim_index==1) { upper="upper"; lower="lower"; } else {upper="left"; lower="right";}
 ((cur_dim[StencilDim.par] == "D")? (
@if (@manycore_stencil_size#(dim_index,"local")@ > 1)
  {
    if (@manycore_stencil_size#(dim_index,upper)@>0 && 
        @manycore_boundaryCore#(upper)@ == false)
    { 
      // ***** | ****** | *****
      // ----------------------
      // ***** | *XXXX* | *****
      // ***** | ****** | *****
      // ***** | ****** | *****
      // ----------------------
      // ***** | ****** | *****
      @gen_manycore_stencil_boundary(upper,old_array,array, cur_dim,dim_index,st_local)@ 
    }
    if (@manycore_stencil_size#(dim_index,lower)@>0 &&
        @manycore_boundaryCore#(lower)@ == false)
    {
      // ***** | ****** | *****
      // ----------------------
      // ***** | ****** | *****
      // ***** | ****** | *****
      // ***** | *XXXX* | *****
      // ----------------------
      // ***** | ****** | *****
      @gen_manycore_stencil_boundary(lower,old_array,array, cur_dim,dim_index,st_local)@ 
    }
  }
else if (@manycore_stencil_size#(dim_index,"local")@ == 1 &&
         @manycore_boundaryCore#(upper)@ == false && 
         @manycore_boundaryCore#(lower)@ == false &&
         @manycore_stencil_size#(dim_index,upper)@>0 &&
         @manycore_stencil_size#(dim_index,lower)@>0)
   {
      // ***** | ****** | *****
      // ----------------------
      // ***** | *XXXX* | *****
      // ----------------------
      // ***** | ****** | *****
      @gen_manycore_stencil_boundary((upper lower),old_array,array, cur_dim,dim_index,st_local)@
   }
@):"") (if (p_dim != "") {manycore_stencil_boundaries#(old_array,array,p_dim,dim_index+1,st_local)})@
</code>

<code manycore_stencil_corners pars=(old_array, array, cur_side, dim1, dim2, st_local)>
if (@manycore_boundaryCore#cur_side@ == false)
 {
   if (@manycore_stencil_size#(0,cur_side)@ > 0)
    {
       if (@manycore_stencil_size#(1,"local")@ > 1)
	 {
	   // Upper corner
	   if (@manycore_boundaryCore#"upper"@ == false)
             // Upper @cur_side@ corner
             // ***** | ****** | *****
             // ----------------------
             // ***** | X***** | *****
             // ***** | ****** | *****
             // ***** | ****** | *****
             // ----------------------
             // ***** | ****** | *****
             @gen_manycore_stencil_boundary(cur_side,old_array,array, dim1,0,gen_manycore_stencil_boundary("upper",old_array,array, dim2,1,st_local))@ 
	   // Lower corner
	   if (@manycore_boundaryCore#"lower"@ == false)
             // Lower @cur_side@ corner
             // ***** | ****** | *****
             // ----------------------
             // ***** | ****** | *****
             // ***** | ****** | *****
             // ***** | X***** | *****
             // ----------------------
             // ***** | ****** | *****
             @gen_manycore_stencil_boundary(cur_side,old_array,array, dim1,0,gen_manycore_stencil_boundary("lower",old_array,array, dim2,1,st_local))@ 
           }
       else if (@manycore_stencil_size#(1,"local")@ == 1)
          // Case of upper and lower corners are the same point
          // ***** | ****** | *****
          // ----------------------
          // ***** | X***** | *****
          // ----------------------
          // ***** | ****** | *****
          @gen_manycore_stencil_boundary(cur_side,old_array,array, dim1,0,gen_manycore_stencil_boundary(("upper" "lower"),old_array,array, dim2,1,st_local))@ 
     }
   else
     {
       printf ("We don't support the size on the adjacent being zero! \n");
       assert(false);
     }
 }
</code>


<xform IndexedAccess pars=(dimsizes) sizes="" size_cur=1 >
if (dimsizes == "") { (ReverseList(cdr(sizes)), 0) } 
else { CODE.StencilDim#(ivar,lo,size,_) = car(dimsizes);
        (res1, res2) = IndexedAccess[sizes=BuildList(size,sizes);size_cur=size*size_cur](cdr(dimsizes)); 
        ( ivar :: res1, ( "(" ivar ")") * size_cur + res2) 
}
</xform>

<code stencil_manycore pars=(old_array,array, dimsizes, st_local) >

@((ivars, access) = IndexedAccess(dimsizes));@
#define local_index@LEN(dimsizes)@D(@ExpList#ivars@) @access@

    int numberOfCores = @array@.get_numberOfCores();
    T** arraySectionPointers = @array@.get_arraySectionPointers();
    T** old_arraySectionPointers = @old_array@.get_arraySectionPointers();

    for (int core = 0; core < numberOfCores; core++)
       {
         T* arraySection     = arraySectionPointers[core];
         T* old_arraySection = old_arraySectionPointers[core];

         Core<T>* cur_core =  @array@.get_coreArray()[core];
         typename Core<T>::index_set_type (*coreArrayNeighborhoodSizes)[3] = cur_core->coreArrayNeighborhoodSizes_2D;
         bool (*bounaryCore)[2]= cur_core->bounaryCore_2D;
         int (*coreArrayNeighborhoodLinearized)[3] = cur_core->coreArrayNeighborhoodLinearized_2D; 
         @CODE.initialize_dimsizes#(LEN(dimsizes))@

         @st_local@

         // ***************************************
         // Now process the edges 
         // ***************************************
         @manycore_stencil_boundaries#(old_array, array, dimsizes,0,st_local)@

         // ********************************************
	 // Now process the corners of the X and Y axis.
	 // ********************************************
         @(for (p=dimsizes; ((dim1=(car p))[StencilDim.par]=="S"); p=cdr(p)) {}
          for (p=cdr(p); ((dim2=(car p))[StencilDim.par]=="S"); p=cdr(p)) {})
         @if (@manycore_stencil_size#(0,"local")@ > 1)
	     {
               @manycore_stencil_corners#(old_array, array, "left", dim1, dim2, st_local)@ 
               @manycore_stencil_corners#(old_array, array, "right", dim1, dim2, st_local)@ 
	     }
	   else if (@manycore_stencil_size#(0,"local")@ == 1 && @manycore_stencil_size#(1,"local")@ == 1)
		 {

		   if (@manycore_boundaryCore#"left"@ == false && @manycore_boundaryCore#"right"@ == false && @manycore_boundaryCore#"upper"@ == false && @manycore_boundaryCore#"lower"@ == false)
		     {
		       if (@manycore_stencil_size#(0,"left")@ > 0 && @manycore_stencil_size#(0,"right")@ > 0)
                          // ***** | * | *****
                          // -----------------
                          // ***** | X | *****
                          // -----------------
                          // ***** | * | *****
                          @gen_manycore_stencil_boundary(("right" "left"),old_array,array, dim2,0,gen_manycore_stencil_boundary(("upper" "lower"),old_array,array, dim1,1,st_local))@ 
		     }
	     }

	   // **************************************************
	   // End of processing the corners of the X and Y axis.
	   // **************************************************
   }                              
</code>

