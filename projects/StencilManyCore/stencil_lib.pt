include ExpStmt.incl

<* 
    gen_manycore_stencil_local: Generate local code of the stencil kernel
        oldarray/newarray: stencil arrays; 
        dimsizes: stencil dimensions; 
        body: stencil code
*>
<xform gen_manycore_stencil_local pars=(oldarray, newarray, dimsizes, body) > 

  dim=0; <* index of stencil dimensions *>

  for (p = dimsizes; p != ""; (p = cdr(p); dim=dim+1)) { <*traverse each stencil dimension  *>

     CODE.StencilDim#(i,lo,hi, par) = car p; <* current dimension information *>

     if (par == "D") <* current dimension is parallelized *>
        body = REPLACE( hi,CODE.manycore_stencil_size#(dim, "local"), body);   <*replace upper bound of stencil with local stencil size *>
  }
  repl="";
  foreach_r (body : (cur=CODE.FunctionCall#((cur_array=oldarray|newarray), CLEAR sub)) 
                  : TRUE) {
  repl = (cur, CODE.manycore_stencil_local_arr#(cur_array,sub)) :: repl;  <* find each stencil array reference in the code, replace it with local array reference*>

  }
  body=REPLACE(repl,body); <* perform the replacement transformation *>
  body
</xform>


<* 
    at_stencil_boundary: Check  whether it is in the boundary or not
        sub: subscript 
        dim: stencil dimensions 
        i: stencil index
        disp: displacement
*>
<xform at_stencil_boundary pars=(sub, dim, i, disp)>
      (sub == BuildBop("+",i,disp)) ||
      (sub == BuildBop("+",disp,i)) ||
      (sub == BuildBop("+",CODE.manycore_stencil_size#(dim,"local"),disp)) ||
      (sub == BuildBop("+",disp,CODE.manycore_stencil_size#(dim,"local")))
</xform>

<* 
   fix_remote_arr_access_subscripts: Fix the remote array access subscripts
      loclist: boundary locations (e.g., left or right. (left right) means a single column 
      oldarray: stencil array 
      dim: stencil dimension information 
      dim_idx: the index of the current stencil dimension 
      res: result
*>
<xform fix_remote_arr_access_subscripts pars=(loclist, oldarray, dim, dim_idx, res)>

CODE.StencilDim#(i,lo,hi,_) = dim;
foreach (ERASE(res) : 
         (cur=CODE.manycore_stencil_remote_arr#(oldarray, _, CLEAR remote_loc, _)): TRUE) 
  {
    switch (remote_loc) {
     case "upper":
         repl_i = (Lookup("left", loclist))? 0
                : (Lookup("right",loclist))? manycore_stencil_size#(dim_idx,remote_loc)-1
                : i;
     case "left": 
         repl_i = (Lookup("upper", loclist))? 0 
                : (Lookup("lower",loclist))? manycore_stencil_size#(dim_idx,remote_loc)-1
                : i;
     case "right":
         repl_i = (Lookup("upper", loclist))? 0 
                : (Lookup("lower",loclist))? manycore_stencil_size#(dim_idx,remote_loc)-1
                : i;
     case "lower":
         repl_i = (Lookup("left", loclist))? 0 
                : (Lookup("right",loclist))? manycore_stencil_size#(dim_idx,remote_loc)-1
                : i;
    }
    res=REPLACE(cur, REPLACE(i,repl_i,cur), res);
  }

  switch (car(loclist)) {
  case "upper"|"left": res = REBUILD(REPLACE(i, lo, res)); 
  case "lower"|"right": 
        res = REBUILD(REPLACE(i, manycore_stencil_size#(dim_idx,"local")-1, res));
  }
res

</xform>

<* 
   replace_boundary_arr_accesses: Replace the boundary of array accesses
      loclist: boundary locations (e.g., left or right. (left right) means a single column 
      array: stencil array 
      dim: stencil dimension information 
      dim_idx: the index of the current stencil dimension 
      res: result
*>
<xform replace_boundary_arr_accesses pars=(loclist, array, dim, dim_idx, res) >

 if (res == "") ERROR("cannot find loop for dimension " i ": " dim "\n from " local);

 CODE.StencilDim#(i,_,_,_) = dim;

 target = DELAY{CODE.manycore_stencil_remote_arr#(array, _, CLEAR old_loc, CLEAR sub) 
                | CODE.manycore_stencil_local_arr#(array, CLEAR sub)};

 foreach (ERASE(res) : (cur=target): TRUE) {
    remote_loc = "";
    for (p_loc = loclist; (loc=car(p_loc)) != ""; p_loc=cdr(p_loc)) {
        disp = (loc:"upper"|"left")? -1 : 1;
   
        nsub = sub;
        for (p_sub = sub; (curdim = car(p_sub)) != ""; p_sub = cdr(p_sub)) 
        { if ( at_stencil_boundary(curdim, dim_idx, i, disp)) {
             nsub = REPLACE(curdim, ((disp< 0)?manycore_stencil_size#(dim_idx,loc)-1 : 0), nsub);
             if (remote_loc == "") remote_loc = loc;
           }
        }
        if (remote_loc != "") BREAK;
    }

      if (remote_loc != "") {
         if(cur : CODE.manycore_stencil_remote_arr) {
            remote_loc =  (remote_loc:"upper"|"lower") ? CODE.manycore_stencil_corner#(remote_loc, old_loc) : 
			CODE.manycore_stencil_corner#(old_loc, remote_loc);
         }
         res = REPLACE(cur, CODE.manycore_stencil_remote_arr#(array,dim_idx,remote_loc, nsub), res); 
      }
 }
 res
</xform>


<* 
   gen_manycore_stencil_boundary: Generate boundary of stencil block
      loclist: boundary locations (e.g., left or right. (left right) means a single column 
      oldarray/array: stencil arrays 
      dim: stencil dimension information 
      dim_idx: the index of the current stencil dimension 
      local: local stencil computation 
*>
<xform gen_manycore_stencil_boundary pars=(loclist, oldarray,array, dim,dim_idx,local) >

CODE.StencilDim#(i,lo,hi,par) = dim;
if (par == "S") { RETURN ""; } <* if dimension is not parallelized, do nothing *>


<* find the loop that traverses the current stencil dimension and remove it from local*>
res="";
looppat = DELAY{CODE.Loop#(i,_,_,_)|CODE.For#((CODE.VarDecl#(_,CODE.VariableWithAnnot#(i,_,_))|CODE.Assign#(i,_)),_,_)};
foreach (ERASE(local) : (cur=CODE.Nest#(looppat,CLEAR body)) : FALSE) { 
  res = REPLACE(cur, body,local); 
}

<* Replace local stencil array references with remote neighbor accesses as appropriate *>
 res = replace_boundary_arr_accesses(loclist, array, dim, dim_idx, res); 

 <* Translate local subscripts in remote array references with the correct remote subscripts *>
 res = fix_remote_arr_access_subscripts(loclist, oldarray, dim, dim_idx, res);
 res
</xform>

