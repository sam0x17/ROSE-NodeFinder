/**
 * \file no_rand.cpp
 * \author Sam Kelly <kelly64@llnl.gov> <kellys@dickinson.edu>
 * \date July 3, 2013
 */

#include "rose.h"
#include "compass2/compass.h"
#include "AstMatching.h"

using std::string;
using namespace StringUtility;

extern const Compass::Checker* const noRandChecker;

/*-----------------------------------------------------------------------------
 * Interface
 *---------------------------------------------------------------------------*/

#ifndef COMPASS_NO_RAND_H
#define COMPASS_NO_RAND_H

namespace CompassAnalyses
{
  /**
   * \brief Description of checker
   */
  namespace NoRand
  {
    extern const string checker_name;
    extern const string short_description;
    extern const string long_description;
    extern       string source_directory;

    /**
     * \brief Specificaiton of checker results.
     */
    class CheckerOutput: public Compass::OutputViolationBase {
     public:
      explicit CheckerOutput(SgNode *const node);

     private:
      DISALLOW_COPY_AND_ASSIGN(CheckerOutput);
    };

    bool IsNodeNotInUserLocation(const SgNode* node)
    {
      const SgLocatedNode* located_node = isSgLocatedNode(node);
      if (located_node != NULL)
      {
        return ! Compass::IsNodeInUserLocation(
            located_node,
            NoRand::source_directory);
      }
      else
      {
        return true;
      }
    };

  } // ::CompassAnalyses
} // ::NoRand
#endif // COMPASS_NO_RAND_H

/*-----------------------------------------------------------------------------
 * Implementation
 *---------------------------------------------------------------------------*/

namespace CompassAnalyses
{
  namespace NoRand
  {
    const string checker_name      = "NoRand";
    const string short_description = "Call to standard library rand() function found";
    const string long_description  = "The C Standard function rand (available in stdlib.h) does not have good random number properties. The numbers generated by rand have a comparatively short cycle, and the numbers may be predictable. To achieve the best random numbers possible, an implementation-specific function needs to be used.";
    string source_directory = "/";
  }
}

CompassAnalyses::NoRand::
CheckerOutput::CheckerOutput(SgNode *const node)
: OutputViolationBase(node,
                      ::noRandChecker->checkerName,
                       ::noRandChecker->shortDescription) {}

static void
run(Compass::Parameters parameters, Compass::OutputObject* output)
{
  // We only care about source code in the user's space, not,
  // for example, Boost or system files.
  string target_directory =
      parameters["general::target_directory"].front();
  CompassAnalyses::NoRand::source_directory.assign(target_directory);

  // Use the pre-built ROSE AST
  SgProject* sageProject = Compass::projectPrerequisite.getProject();
  SgNode* root_node = (SgNode*) sageProject;

  // perform AST matching
  AstMatching matcher;

  MatchResult matches = matcher.performMatching("$r=SgFunctionRefExp",
                                                root_node);

  BOOST_FOREACH(SingleMatchVarBindings match, matches)
  {
    SgFunctionRefExp *function = (SgFunctionRefExp *)match["$r"];
    std::string fncName = function->get_symbol()->get_name().getString();

    if( fncName.find( "rand", 0, 4) != std::string::npos)
    {
      output->addOutput(
          new CompassAnalyses::NoRand::CheckerOutput(function));
    }
  }
}


extern const Compass::Checker* const noRandChecker =
    new Compass::CheckerUsingAstSimpleProcessing(
        CompassAnalyses::NoRand::checker_name,
        // Descriptions should not include the newline character "\n".
        CompassAnalyses::NoRand::short_description,
        CompassAnalyses::NoRand::long_description,
        Compass::C | Compass::Cpp,
        Compass::PrerequisiteList(1, &Compass::projectPrerequisite),
        run,
        NULL);

