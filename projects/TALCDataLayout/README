TALC
=====
TALC is a Data Layout Optimization tool written in ROSE source to source compiler
framework. TALC uses a Meta file (specified by user) to perform the data layout
optimizations. TALC Optimizer generates a source file at the end of the optimization.
Please refer to details below to run TALC and compile the source code.

Running TALC
=============

talc -rose:skipfinalCompileStep <options> -I<path to TALC.hpp> <source file>

options:
	--meta <filename>  	: Parses the Meta file
	-module:aos		: Apply array of struct transformation
	-module:usegraph	: Output Field use graph
	-extend			: Apply transformation to extended types, useful 
				  only with some module transformation
  	-ha:r			: Add restrict keyword
  	-ha:(gcc|xlc|icc)	: choose appropriate compiler for hardware optimization

Note that TALC.hpp should be include in the source file and is present in src/runtime
directory.

Compile Source File
===================
In order to compile TALC generated source file, please use TALC runtime library and path to header file as follows, 
	<compiler> <compiler options> -I<path to TALC.hpp> -L<path to libtalcruntime> <source file> -o <out file> -ltalcruntime

	e.g. g++ -O3 -I$(srcdir)/../src/runtime -L../src/runtime rose_test1.C -o test1 -ltalcruntime
	Note: The Meta file needs to placed in the same directory where the source code is present, in the above case test1 executable directory. Also, the Meta file has to named "Meta" irrespective of whatever name was specified as input (--meta) to TALC. This is because, TALC runtime searches for Meta file in the current directory at runtime. It is mandatory to use the following command, before running the executable,
	cp <Meta File> Meta

	Overall Example from start to finish:
	1. talc -rose:skipfinalCompileStep -I$(srcdir)/../src/runtime -extend --meta Meta1 -module:aos test1.cpp
	2. g++ -O3 -I$(srcdir)/../src/runtime -L../src/runtime rose_test1.C -o test1 -ltalcrunti
me
	3. cp Meta1 Meta
	4. ./test1

TALC Source Code Details
========================

	src - Contains the entire source
	+- haopt     - Hardware Optimization Pass
	+- main      - Main Routine for TALC
	+- meta      - Meta Processing Files
	+- modules   - Different Passes like AOS, AoSoA, etc
	+- runtime   - Runtime library for TALC and TALC.hpp header file
	+- utilities - Common files used across source code

	tests - Contains some basic test cases for TALC

References
==========
For more information, please refer to references below,
[1] "User-Specified and Automatic Data Layout Selection for Portable Performance", K. Sharma, I. Karlin, J. Keasler, J. McGraw, V.Sarkar, LLNL-TR-637873, May 2013 
[2] TALC Compiler, https://wci.llnl.gov/codes/talc/
[3] "TALC: A Simple C Language Extension For Improved Performance and Code Maintainability", Jeff Keasler, Terry Jones, Dan Quinlan, 9th LCI International Conference on High-Performance Clustered Computing, April 2008

Contributions
=============
Source Code : Kamal Sharma, Jeff Keasler
Technical Team: Kamal Sharma, Ian Karlin, Jeff Keasler, James McGraw, Vivek Sarkar
		Rice Univesity , LLNL

Original Concept was developed by Jeff Keasler.
