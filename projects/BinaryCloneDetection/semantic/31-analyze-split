#!/usr/bin/perl
# Analyses the results from splitting a worklist.  Command-line arguments are the worklists.
use strict;
my($list_all) = shift if $ARGV[0] eq '--all';

sub load_worklist {
    my($filename) = @_;
    my($npoints, $nfetch, $cache_hi, %cache) = (0, 0, 0);
    open WORKLIST, "<", $filename or die "$filename: $!\n";
    while (<WORKLIST>) {
	if (my($x,$y) = /(\d+)\s+(\d+)/) {
	    ++$npoints;
	    ++$nfetch unless $cache{$x};
	    $cache{$x} = 1;
	    ++$nfetch unless $cache{$y};
	    $cache{$y} = 1;
	    $cache_hi = keys %cache if $cache_hi < keys %cache;
	} elsif (/^#LAST\s+(\d+)/) {
	    delete $cache{$1};
	}
    }
    close WORKLIST;
    return ($npoints, $nfetch, $cache_hi);
}

print "In the following table:\n";
print "   'Npoints' is the number of pairs of functions compared\n";
print "   'Nfetch'  is the number of times function data had to be read from the database\n";
print "   'Nmem'    is the highest number of function's whose data was in memory at one time\n";
print "\n";
printf "%8s %8s %8s\n", "Npoints", "Nfetch", "Nmem";
print join(" ", ("-" x 8) x 3), "-" x 20, "\n";

my($total_npoints, $total_nfetch, $total_nmemory,
   $min_npoints,   $min_nfetch,   $min_nmemory,
   $max_npoints,   $max_nfetch,   $max_nmemory);
for my $worklist (@ARGV) {
    my($npoints, $nfetch, $nmemory) = load_worklist $worklist;
    printf "%8d %8d %8d    %s\n", $npoints, $nfetch, $nmemory, $worklist if $list_all;
    $total_npoints += $npoints;
    $total_nfetch += $nfetch;
    $total_nmemory += $nmemory;

    $min_npoints = $npoints if $min_npoints > $npoints || !defined $min_npoints;
    $min_nfetch  = $nfetch  if $min_nfetch  > $nfetch  || !defined $min_nfetch;
    $min_nmemory = $nmemory if $min_nmemory > $nmemory || !defined $min_nmemory;

    $max_npoints = $npoints if $max_npoints < $npoints;
    $max_nfetch  = $nfetch  if $max_nfetch  < $nfetch;
    $max_nmemory = $nmemory if $max_nmemory < $nmemory;
}

print join(" ", ("-" x 8) x 3), "-" x 20, "\n" if $list_all;
printf "%8d %8d %8s    Total\n", $total_npoints, $total_nfetch, "n/a";
printf "%8d %8d %8d    Minimum\n", $min_npoints, $min_nfetch, $min_nmemory;
printf "%8d %8d %8d    Maximum\n", $max_npoints, $max_nfetch, $max_nmemory;
print join(" ", ("-" x 8) x 3), "-" x 20, "\n";

print "\n";
printf "Number of parts created:              %6d\n", 0+@ARGV;
printf "Average fetches per 1000 compares:    %12.5f\n", 1000*$total_nfetch/$total_npoints;
printf "Average memory use per 1000 compares: %12.5f\n", 1000*$total_nmemory/$total_npoints;
