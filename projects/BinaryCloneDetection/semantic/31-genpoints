#!/usr/bin/perl
# Generate a bunch of 2d points for testing 31-split2d-worklist.  Output is similar in nature to 31-func-similarity-worklist.
use strict;

my $density = shift || 0.3;	# ratio of tested pairs to total pairs
my $dimsize = shift || 2000;	# approximate total number of functions
my $nchunks = shift || 10;      # number of chunks in each dimension (1=>even distribution across whole space)

# Arg checking
die "density must be between zero and one\n" if $density<0 || $density>1;
die "dimension size must be positive\n" unless $dimsize>0;
die "number of chunks must be positive\n" unless $nchunks>0;
die "number of chunks must not exceed the dimension size\n" if $nchunks>$dimsize;

# Choose chunk sizes, then adjust whole dimensions
my($chunksz) = int($dimsize/$nchunks + 0.5);
$dimsize = $chunksz * $nchunks;
print STDERR "number of functions:  $dimsize\n";
print STDERR "desired density:      $density\n";
print STDERR "density chunks:       $nchunks in each dimension\n";

# Returns random boolean so that on average the number of true returns per total calls is $p.
sub coin { return rand(1) < $_[0] }

# Assign densities to the individual chunks but they must average the desired density. This is an array indexed
# by X chunk number that points to array references indexed by Y chunk number.  E.g., the chunk density for chunk (i,j)
# is $chunk_densities->[i][j];
sub compute_density {
    coin($density) ? $density + rand(1-$density) : $density - rand($density);
}

my $chunk_densities = [ map {[ map {compute_density} 0 .. $nchunks-1 ]} 0 .. $nchunks-1 ];

# This isn't efficient, but its easy. ;-)
my $npoints = 0;
for (my $mi=0; $mi<$nchunks; $mi++) {
    for (my $mj=$mi; $mj<$nchunks; $mj++) {
	for (my $i=0; $i<$chunksz; ++$i) {
	    for (my $j=0; $j<$chunksz; ++$j) {
		if (rand() <= $chunk_densities->[$mi][$mj]) {
		    my $x = $mi*$chunksz+$i;
		    my $y = $mj*$chunksz+$j;
		    if ($x < $y) {
			print "$x $y\n";
			++$npoints;
		    }
		}
	    }
	}
    }
}

my($possible_points) = ($dimsize * ($dimsize-1)) / 2;
my($actual_density) = $npoints / $possible_points;

print STDERR "function comparisons: $npoints\n";
print STDERR "actual density:       $actual_density\n";
