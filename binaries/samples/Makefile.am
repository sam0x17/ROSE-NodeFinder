include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
include $(srcdir)/Specimens.inc

EXTRA_DIST = CMakeLists.txt $(all_specimens) $(other_distributed) x86-64-ctrlaltdel \
             pocketputty.exe

###############################################################################################################################
# Larger collections of specimens.  These follow the same naming convention except "any" can appear in one of the positions.

# This rule regenerates the makefile fragment that can be included into other makefiles. I had to do it this round about way
# because I couldn't get GNU make's "foreach" function to generate new variables.  After you generate a new SpecimenSets.inc
# you must re-run the automake and configure scripts in order to incorporate the new file into the generated makefiles.
.PHONY: build-SpecimenSets.inc
build-SpecimenSets.inc:
	@(											\
		echo '# Collections of binary specimens                    -*- makefile -*-';	\
		echo '# This file is automatically generated by running';			\
		echo '#   $$ make build-SpecimenSets.inc';					\
		echo '# in the $$ROSE_BUILD/binaries/samples directory';			\
		echo;										\
		echo 'include $$(top_srcdir)/binaries/samples/Specimens.inc';			\
												\
		echo;										\
		echo '# Container agnostic';							\
		for filetype in $(specimen_filetypes); do					\
		    for arch in $(specimen_architectures); do					\
			echo -n "any_$${filetype}_$${arch}_specimens =" ;			\
			for container in $(specimen_containers); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
			echo;									\
		    done;									\
		done;										\
												\
		echo;										\
		echo '# Filetype agnostic';							\
		for container in $(specimen_containers); do					\
		    for arch in $(specimen_architectures); do					\
			echo -n "$${container}_any_$${arch}_specimens =";			\
			for filetype in $(specimen_filetypes); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
			echo;									\
		    done;									\
		done;										\
												\
		echo;										\
		echo '# Architecture agnostic';							\
		for container in $(specimen_containers); do					\
		    for filetype in $(specimen_filetypes); do					\
			echo -n "$${container}_$${filetype}_any_specimens =";			\
			for arch in $(specimen_architectures); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
			echo;									\
		    done;									\
		done;										\
												\
		echo;										\
		echo '# Filetype and architecture agnostic';					\
		for container in $(specimen_containers); do					\
		    echo -n "$${container}_any_any_specimens =";				\
		    for filetype in $(specimen_filetypes); do					\
			for arch in $(specimen_architectures); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
		    done;									\
		    echo;									\
		done;										\
												\
		echo;										\
		echo '# Container and architecture agnostic';					\
		for filetype in $(specimen_filetypes); do					\
		    echo -n "any_$${filetype}_any_specimens =";					\
		    for container in $(specimen_containers); do					\
			for arch in $(specimen_architectures); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
		    done;									\
		    echo;									\
		done;										\
												\
		echo;										\
		echo '# Container and filetype agnostic';					\
		for arch in $(specimen_architectures); do					\
		    echo -n "any_any_$${arch}_specimens =";					\
		    for container in $(specimen_containers); do					\
			for filetype in $(specimen_filetypes); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
		    done;									\
		    echo;									\
		done;										\
												\
		echo;										\
		echo '# All binary specimens';							\
		echo -n "any_any_any_specimens =";						\
		for container in $(specimen_containers); do					\
		    for filetype in $(specimen_filetypes); do					\
			for arch in $(specimen_architectures); do				\
			    echo -n " %($${container}_$${filetype}_$${arch}_specimens)";	\
			done;									\
		    done;									\
		done;										\
		echo;										\
	) |sed 's/%/$$/g' >SpecimenSets.inc
	mv SpecimenSets.inc $(srcdir)/.

